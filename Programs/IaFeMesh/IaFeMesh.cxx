// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "IaFeMesh.h"

void IaFeMesh::cb_ClipImageBoxLightButton_i(Fl_Light_Button*, void*) {
  if(ClipImageBoxLightButton->value())
{
	if(GetImageCheckedItem())
	{
		GetImageCheckedItem()->EnableBoxWidget(1);
	}
}
else
{
	if(GetImageCheckedItem())
	{
		GetImageCheckedItem()->EnableBoxWidget(0);
	}
};
}
void IaFeMesh::cb_ClipImageBoxLightButton(Fl_Light_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ClipImageBoxLightButton_i(o,v);
}

void IaFeMesh::cb_ClipImageImagePlaneLightButton_i(Fl_Light_Button*, void*) {
  if(ClipImageImagePlaneLightButton->value())
{
	if(GetImageCheckedItem())
	{
		GetImageCheckedItem()->EnableImagePlaneWidget(1);
	}
}
else
{
	if(GetImageCheckedItem())
	{
		GetImageCheckedItem()->EnableImagePlaneWidget(0);
	}
};
}
void IaFeMesh::cb_ClipImageImagePlaneLightButton(Fl_Light_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ClipImageImagePlaneLightButton_i(o,v);
}

void IaFeMesh::cb_ClipImageClipReturnButton_i(Fl_Return_Button*, void*) {
  if(GetImageCheckedItem())
{
	GetImageCheckedItem()->ClipImage();
	GetImageCheckedItem()->ShowWidget(0);
	this->vtkImageList.Add(new vtkMimxClipImageFromBox);
	this->ImageCheckBrowser->add("Clipped Image");
	this->ImageCheckBrowser->redraw();
 		
 	this->vtkImageList.GetValue(this->ImageCheckBrowser->nitems())
		->SetInput(GetImageCheckedItem()->GetitkImageOutput());		
        ImageCheckBrowser->check_none();
        ImageCheckBrowser->set_checked(ImageCheckBrowser->nitems());

	this->GetImageCheckedItem()->SetInteractor(VTKFlWindow);
	this->GetImageCheckedItem()->DisplayWidgets();

	this->FitView();
        HideAll();
       ImageGroup->show();

	
};
}
void IaFeMesh::cb_ClipImageClipReturnButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ClipImageClipReturnButton_i(o,v);
}

void IaFeMesh::cb_ClipImageGroupCloseButton_i(Fl_Button*, void*) {
  ClipImageFromBoxGroup->hide();
}
void IaFeMesh::cb_ClipImageGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ClipImageGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_ImageCheckBrowser_i(Fl_Check_Browser*, void*) {
  for(int i=1; i <= this->ImageCheckBrowser->nitems(); i++)
{
	this->vtkImageList.GetValue(i)->ShowWidget(0);
}

if(GetImageCheckedItem())
{
	GetImageCheckedItem()->ShowWidget(1);
}

	this->FitView();
        HideAll();
       ImageGroup->show();
}
void IaFeMesh::cb_ImageCheckBrowser(Fl_Check_Browser* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->user_data()))->cb_ImageCheckBrowser_i(o,v);
}

void IaFeMesh::cb_STLCheckBrowser_i(Fl_Check_Browser*, void*) {
  int item = STLCheckBrowser->value();

if (STLCheckBrowser->nitems() == 1)
  {
  STLCheckBrowser->set_checked( 1 );
  }
else
  {
  if (STLCheckBrowser->checked(item))
    {
    STLCheckBrowser->check_none();
    STLCheckBrowser->set_checked(item);
    }
  }

/*    
this->Reset();
if(this->GetSTLCheckedItem())
{
this->GetSTLCheckedItem()->GetActor()->GetProperty()->SetColor(1.0,0.0,0.0);
this->VTKRenderer->RemoveActor(this->GetSTLCheckedItem()->GetActor());
this->VTKRenderer->AddActor(this->GetSTLCheckedItem()->GetActor());
this->FitView();
}
*/;
}
void IaFeMesh::cb_STLCheckBrowser(Fl_Check_Browser* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_STLCheckBrowser_i(o,v);
}

void IaFeMesh::cb_SurfaceSourceRoundButton_i(Fl_Round_Button*, void*) {
  SurfaceSource = this->GetSTLCheckedItem();
}
void IaFeMesh::cb_SurfaceSourceRoundButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_SurfaceSourceRoundButton_i(o,v);
}

void IaFeMesh::cb_SurfaceTargetButton_i(Fl_Round_Button*, void*) {
  SurfaceTarget = GetSTLCheckedItem();
}
void IaFeMesh::cb_SurfaceTargetButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_SurfaceTargetButton_i(o,v);
}

void IaFeMesh::cb_SurfaceDistanceMapComputeButton_i(Fl_Button*, void*) {
  if(SurfaceSource !=NULL && SurfaceTarget !=NULL)
{
	if(!SurfaceGrayScaleRoundButton->value())
{
	if(!SpecifyMaxDistValueCheckButton->value())
	{
		if(SurfaceRGBScaleRoundButton->value())
		{
			SurfaceSource->ClosestPointDistanceMap(SurfaceTarget);
			ScalarBarActor->SetLookupTable(SurfaceSource->GetPolyDataMapper()->GetLookupTable());
			this->VTKRenderer->AddActor(ScalarBarActor);
			this->VTKRenderer->RemoveActor(SurfaceTarget->GetActor());
	
		}
	}
	else
	{
			this->VTKRenderer->RemoveActor(ScalarBarActor);
		SurfaceSource->ClosestPointDistanceMapMod
			(SurfaceTarget,float(DistanceMapMaxValue->value()));
//			this->VTKRenderer->RemoveActor(SurfaceSource->GetActor
			SurfaceSource->GenerateLookupTableMod(ScalarBarActor,
			float(DistanceMapMaxValue->value()));
			this->VTKRenderer->AddActor(ScalarBarActor);
	}
}
else
{
	if(!SpecifyMaxDistValueCheckButton->value())
	{
		if(SurfaceGrayScaleRoundButton->value())
		{
			SurfaceSource->ClosestPointDistanceMapGrayScale(SurfaceTarget);
			ScalarBarActor->SetLookupTable(SurfaceSource->GetPolyDataMapper()->GetLookupTable());
			this->VTKRenderer->AddActor(ScalarBarActor);
			this->VTKRenderer->RemoveActor(SurfaceTarget->GetActor());
	
		}
	}
	else
	{
			this->VTKRenderer->RemoveActor(ScalarBarActor);
		SurfaceSource->ClosestPointDistanceMapModGrayScale
			(SurfaceTarget,float(DistanceMapMaxValue->value()));
//			this->VTKRenderer->RemoveActor(SurfaceSource->GetActor
			SurfaceSource->GenerateLookupTableModGrayScale(ScalarBarActor,
			float(DistanceMapMaxValue->value()));
			this->VTKRenderer->AddActor(ScalarBarActor);
	}
}
	this->VTKRenderWindow->Render();					
};
}
void IaFeMesh::cb_SurfaceDistanceMapComputeButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_SurfaceDistanceMapComputeButton_i(o,v);
}

void IaFeMesh::cb_SurfaceDistanceMapGroupCloseButton_i(Fl_Button*, void*) {
  ScalarBarActor->Delete();
SurfaceDistanceMapGroup->hide();
}
void IaFeMesh::cb_SurfaceDistanceMapGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_SurfaceDistanceMapGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_ExtrudeSurfaceGroupCloseButton_i(Fl_Button*, void*) {
  ExtrudeSurfaceGroup->hide();
}
void IaFeMesh::cb_ExtrudeSurfaceGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ExtrudeSurfaceGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_ExtrudeSurfaceDoneButton_i(Fl_Return_Button*, void*) {
  if(GetSTLCheckedItem())

{
	vtkMimxExtrudePolyData *extrude = vtkMimxExtrudePolyData::New();
	extrude->SetInput(GetSTLCheckedItem()->GetPolyData());
	extrude->SetExtrusionLength(double (ExtrudeSurfaceExtrusionLengthInput->value()));
	extrude->SetReverseExtrusionDirection(int (ExtrudeSurfaceSetNormalDirection->value()));
	extrude->Update();
	
	
	this->vtkUGridList.Add(new vtkMimxUGrid);
	this->UGridCheckBrowser->add("Extrude");
	this->UGridCheckBrowser->redraw();

        UGridCheckBrowser->check_none();
        UGridCheckBrowser->set_checked(UGridCheckBrowser->nitems());
	
		
	this->GetUGridCheckedItem()->UGrid->DeepCopy(extrude->GetOutput());
	this->GetUGridCheckedItem()->UGrid->Modified();	
        this->VTKRenderer->AddActor(this->vtkUGridList.GetLastItem()->GetActor());
	this->FitView();
        HideAll();
	UnstructuredMeshGroup->show();
	extrude->Delete();
	
};
}
void IaFeMesh::cb_ExtrudeSurfaceDoneButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ExtrudeSurfaceDoneButton_i(o,v);
}

void IaFeMesh::cb_PatchSurfaceGroupCloseButton_i(Fl_Button*, void*) {
  PatchSurfaceGroup->hide();
}
void IaFeMesh::cb_PatchSurfaceGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_PatchSurfaceGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_PatchSurfaceGroupPatchReturnButton_i(Fl_Return_Button*, void*) {
  vtkMimxPatchSurfaceMesh *patch = vtkMimxPatchSurfaceMesh::New();
  patch->SetInput(this->GetSTLCheckedItem()->GetPolyData());
  patch->Update();
  
  if(patch->GetOutput())
  {
  	this->vtkSTLSourceList.Add(vtkMimxSTLSource::New());
	this->STLCheckBrowser->add("Patch");
	this->STLCheckBrowser->redraw();

        STLCheckBrowser->check_none();
        STLCheckBrowser->set_checked(STLCheckBrowser->nitems());
	
	this->GetSTLCheckedItem()->GetPolyData()->DeepCopy(patch->GetOutput());
	this->GetSTLCheckedItem()->GetPolyData()->Modified();	
        this->VTKRenderer->AddActor(this->GetSTLCheckedItem()->GetActor());
	this->FitView();
        HideAll();
        SurfaceGroup->show();
  }
  patch->Delete();
}
void IaFeMesh::cb_PatchSurfaceGroupPatchReturnButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_PatchSurfaceGroupPatchReturnButton_i(o,v);
}

void IaFeMesh::cb_CurveCheckBrowser_i(Fl_Check_Browser*, void*) {
  this->Reset();
if(this->GetCurveCheckedItem())
{
this->GetCurveCheckedItem()->GetActor()->GetProperty()->SetColor(1.0,0.0,0.0);
this->VTKRenderer->RemoveActor(this->GetCurveCheckedItem()->GetActor());
this->VTKRenderer->AddActor(this->GetCurveCheckedItem()->GetActor());
this->FitView();
};
}
void IaFeMesh::cb_CurveCheckBrowser(Fl_Check_Browser* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->user_data()))->cb_CurveCheckBrowser_i(o,v);
}

void IaFeMesh::cb_CurvePickStartRadioButton_i(Fl_Round_Button*, void*) {
  this->vtkCurveList.Add(vtkMimxCurve::New());
this->CurveCheckBrowser->add(this->LineCurveLabelTextInput->value());	
this->CurveCheckBrowser->redraw();
CurveCheckBrowser->check_none();
CurveCheckBrowser->set_checked(CurveCheckBrowser->nitems());
InteractorStyleSelect->SetActor(this->vtkCurveList.GetLastItem()->GetActor());
InteractorStyleSelect->SetInteractorStyleSelectState(10);
}
void IaFeMesh::cb_CurvePickStartRadioButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_CurvePickStartRadioButton_i(o,v);
}

void IaFeMesh::cb_CurvePickEndRadioButton_i(Fl_Round_Button*, void*) {
  InteractorStyleSelect->SetInteractorStyleSelectState(0);
}
void IaFeMesh::cb_CurvePickEndRadioButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_CurvePickEndRadioButton_i(o,v);
}

void IaFeMesh::cb_ContinueCreateTraceRoundButton_i(Fl_Round_Button*, void*) {
  InteractorStyleSelect->SetActor(this->vtkCurveList.GetLastItem()->GetActor());
InteractorStyleSelect->SetInteractorStyleSelectState(10);
}
void IaFeMesh::cb_ContinueCreateTraceRoundButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ContinueCreateTraceRoundButton_i(o,v);
}

void IaFeMesh::cb_CreateCurveGroupCloseButton_i(Fl_Button*, void*) {
  CreateCurveGroup->hide();
}
void IaFeMesh::cb_CreateCurveGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_CreateCurveGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_PlanarMeshTransInterpCurveSelectRadioButton1_i(Fl_Round_Button*, void*) {
  Curve[0] = NULL;
Curve[0] = this->GetCurveCheckedItem();
}
void IaFeMesh::cb_PlanarMeshTransInterpCurveSelectRadioButton1(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_PlanarMeshTransInterpCurveSelectRadioButton1_i(o,v);
}

void IaFeMesh::cb_PlanarMeshTransInterpCurveSelectRadioButton2_i(Fl_Round_Button*, void*) {
  Curve[1] = NULL;
Curve[1] = this->GetCurveCheckedItem();
}
void IaFeMesh::cb_PlanarMeshTransInterpCurveSelectRadioButton2(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_PlanarMeshTransInterpCurveSelectRadioButton2_i(o,v);
}

void IaFeMesh::cb_PlanarMeshTransInterpCurveSelectRadioButton3_i(Fl_Round_Button*, void*) {
  Curve[2] = NULL;
Curve[2] = this->GetCurveCheckedItem();
}
void IaFeMesh::cb_PlanarMeshTransInterpCurveSelectRadioButton3(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_PlanarMeshTransInterpCurveSelectRadioButton3_i(o,v);
}

void IaFeMesh::cb_PlanarMeshTransInterpCurveSelectRadioButton4_i(Fl_Round_Button*, void*) {
  Curve[3] = NULL;
Curve[3] = this->GetCurveCheckedItem();
}
void IaFeMesh::cb_PlanarMeshTransInterpCurveSelectRadioButton4(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_PlanarMeshTransInterpCurveSelectRadioButton4_i(o,v);
}

void IaFeMesh::cb_PlanarMeshTransInterpDoneButton_i(Fl_Return_Button*, void*) {
  /*vtkCurveToitkPolygon3DSpatialObject* CurveToPolygon3DSpatialObject1= new vtkCurveToitkPolygon3DSpatialObject;
CurveToPolygon3DSpatialObject1->SetInput(Curve1);
vtkCurveToitkPolygon3DSpatialObject* CurveToPolygon3DSpatialObject2= new vtkCurveToitkPolygon3DSpatialObject;
CurveToPolygon3DSpatialObject2->SetInput(Curve2);
vtkCurveToitkPolygon3DSpatialObject* CurveToPolygon3DSpatialObject3= new vtkCurveToitkPolygon3DSpatialObject;
CurveToPolygon3DSpatialObject3->SetInput(Curve3);
vtkCurveToitkPolygon3DSpatialObject* CurveToPolygon3DSpatialObject4= new vtkCurveToitkPolygon3DSpatialObject;
CurveToPolygon3DSpatialObject4->SetInput(Curve4);

typedef itk::Polygon3DSpatialObject<3> CurveType3D;

typedef itk::Mesh<double,3> MeshType;
itk::CurveToStructuredPlanarMesh<CurveType3D,MeshType>::Pointer
   CurveToStructuredPlanarMeshPointer = itk::CurveToStructuredPlanarMesh<CurveType3D,MeshType>::New();
   CurveToStructuredPlanarMeshPointer->SetCurve(1,CurveToPolygon3DSpatialObject1->GetOutput());
   CurveToStructuredPlanarMeshPointer->SetCurve(2,CurveToPolygon3DSpatialObject2->GetOutput());
   CurveToStructuredPlanarMeshPointer->SetCurve(3,CurveToPolygon3DSpatialObject3->GetOutput());
   CurveToStructuredPlanarMeshPointer->SetCurve(4,CurveToPolygon3DSpatialObject4->GetOutput());
   CurveToStructuredPlanarMeshPointer->GenerateQuadrilateralMesh();
   itkQuadMeshTovtkPolyData* convert = new itkQuadMeshTovtkPolyData;
   convert->SetInput(CurveToStructuredPlanarMeshPointer->GetOutput());
   vtkPolyDataMapper* mapper = vtkPolyDataMapper::New();
   mapper->SetInput(convert->GetOutput());
   vtkActor* interpactor = vtkActor::New();
   interpactor->SetMapper(mapper);
interpactor->GetProperty()->SetColor(1.0,0.0,0.0);
   this->VTKRenderer->AddActor(interpactor);
this->FitView();
Curve1 = NULL;
Curve2 = NULL;
Curve3 = NULL;
Curve4 = NULL;*/
SurfaceGroup->show();
}
void IaFeMesh::cb_PlanarMeshTransInterpDoneButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_PlanarMeshTransInterpDoneButton_i(o,v);
}

void IaFeMesh::cb_PlanarMeshTransInterpCreateGroupCloseButton_i(Fl_Button*, void*) {
  PlanarTransInterpGroup->hide();
}
void IaFeMesh::cb_PlanarMeshTransInterpCreateGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_PlanarMeshTransInterpCreateGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_CruveSolidTransInterpCurve1RadioButton_i(Fl_Round_Button*, void*) {
  Curve[0] = NULL;
if(this->GetCurveCheckedItem())
	Curve[0] = this->GetCurveCheckedItem();
}
void IaFeMesh::cb_CruveSolidTransInterpCurve1RadioButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_CruveSolidTransInterpCurve1RadioButton_i(o,v);
}

void IaFeMesh::cb_CruveSolidTransInterpCurve2RadioButton_i(Fl_Round_Button*, void*) {
  Curve[1] = NULL;
if(this->GetCurveCheckedItem())
	Curve[1] = this->GetCurveCheckedItem();
}
void IaFeMesh::cb_CruveSolidTransInterpCurve2RadioButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_CruveSolidTransInterpCurve2RadioButton_i(o,v);
}

void IaFeMesh::cb_CruveSolidTransInterpCurve3RadioButton_i(Fl_Round_Button*, void*) {
  Curve[2] = NULL;
if(this->GetCurveCheckedItem())
	Curve[2] = this->GetCurveCheckedItem();
}
void IaFeMesh::cb_CruveSolidTransInterpCurve3RadioButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_CruveSolidTransInterpCurve3RadioButton_i(o,v);
}

void IaFeMesh::cb_CruveSolidTransInterpCurve4RadioButton_i(Fl_Round_Button*, void*) {
  Curve[3] = NULL;
if(this->GetCurveCheckedItem())
	Curve[3] = this->GetCurveCheckedItem();
}
void IaFeMesh::cb_CruveSolidTransInterpCurve4RadioButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_CruveSolidTransInterpCurve4RadioButton_i(o,v);
}

void IaFeMesh::cb_CruveSolidTransInterpCurve5RadioButton_i(Fl_Round_Button*, void*) {
  Curve[4] = NULL;
if(this->GetCurveCheckedItem())
	Curve[4] = this->GetCurveCheckedItem();
}
void IaFeMesh::cb_CruveSolidTransInterpCurve5RadioButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_CruveSolidTransInterpCurve5RadioButton_i(o,v);
}

void IaFeMesh::cb_CruveSolidTransInterpCurve6RadioButton_i(Fl_Round_Button*, void*) {
  Curve[5] = NULL;
if(this->GetCurveCheckedItem())
	Curve[5] = this->GetCurveCheckedItem();
}
void IaFeMesh::cb_CruveSolidTransInterpCurve6RadioButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_CruveSolidTransInterpCurve6RadioButton_i(o,v);
}

void IaFeMesh::cb_CruveSolidTransInterpCurve7RadioButton_i(Fl_Round_Button*, void*) {
  Curve[6] = NULL;
if(this->GetCurveCheckedItem())
	Curve[6] = this->GetCurveCheckedItem();
}
void IaFeMesh::cb_CruveSolidTransInterpCurve7RadioButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_CruveSolidTransInterpCurve7RadioButton_i(o,v);
}

void IaFeMesh::cb_CruveSolidTransInterpCurve8RadioButton_i(Fl_Round_Button*, void*) {
  Curve[7] = NULL;
if(this->GetCurveCheckedItem())
	Curve[7] = this->GetCurveCheckedItem();
}
void IaFeMesh::cb_CruveSolidTransInterpCurve8RadioButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_CruveSolidTransInterpCurve8RadioButton_i(o,v);
}

void IaFeMesh::cb_CruveSolidTransInterpCurve9RadioButton_i(Fl_Round_Button*, void*) {
  Curve[8] = NULL;
if(this->GetCurveCheckedItem())
	Curve[8] = this->GetCurveCheckedItem();
}
void IaFeMesh::cb_CruveSolidTransInterpCurve9RadioButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_CruveSolidTransInterpCurve9RadioButton_i(o,v);
}

void IaFeMesh::cb_CruveSolidTransInterpCurve10RadioButton_i(Fl_Round_Button*, void*) {
  Curve[9] = NULL;
if(this->GetCurveCheckedItem())
	Curve[9] = this->GetCurveCheckedItem();
}
void IaFeMesh::cb_CruveSolidTransInterpCurve10RadioButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_CruveSolidTransInterpCurve10RadioButton_i(o,v);
}

void IaFeMesh::cb_CruveSolidTransInterpCurve11RadioButton_i(Fl_Round_Button*, void*) {
  Curve[10] = NULL;
if(this->GetCurveCheckedItem())
	Curve[10] = this->GetCurveCheckedItem();
}
void IaFeMesh::cb_CruveSolidTransInterpCurve11RadioButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_CruveSolidTransInterpCurve11RadioButton_i(o,v);
}

void IaFeMesh::cb_CruveSolidTransInterpCurve12RadioButton_i(Fl_Round_Button*, void*) {
  Curve[11] = NULL;
if(this->GetCurveCheckedItem())
	Curve[11] = this->GetCurveCheckedItem();
}
void IaFeMesh::cb_CruveSolidTransInterpCurve12RadioButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_CruveSolidTransInterpCurve12RadioButton_i(o,v);
}

void IaFeMesh::cb_EdgeToSolidMeshDoneButton_i(Fl_Return_Button*, void*) {
  int dim[3];
dim[0] = int (CurveToSolidMeshSeedI->value());
dim[1] = int (CurveToSolidMeshSeedJ->value());
dim[2] = int (CurveToSolidMeshSeedK->value());
vtkMimxEdgeToStructuredGrid *sgrid = vtkMimxEdgeToStructuredGrid::New();
sgrid->SetDimensions(dim);
for(int i=0; i<12; i++)
{
	if(Curve[i] == NULL)	Curve[i] = vtkMimxCurve::New();
	sgrid->SetEdge(i,Curve[i]->PolyData);
}
if(EdgeToSolidPlaneSelectIJRadioButton->value())
{	sgrid->SetPlane(1);}
if(EdgeToSolidPlaneSelectJKRadioButton->value()){	sgrid->SetPlane(2);}
if(EdgeToSolidPlaneSelectKIRadioButton->value()){	sgrid->SetPlane(3);}
sgrid->Update();
	vtkStructuredGridWriter* writer = vtkStructuredGridWriter::New();
	writer->SetInput(sgrid->GetOutput());
	writer->SetFileName("sgrid.vtk");
	vtkStructuredGridReader *reader = vtkStructuredGridReader::New();
	writer->Write();
	reader->SetFileName("sgrid.vtk");
	reader->Update();

for(int i=0; i<12; i++)
{
	Curve[i]->PolyData->Modified();
	this->VTKRenderer->AddActor(Curve[i]->GetActor());
}
vtkSolidStructuredGridSourceList.Add(vtkMimxSolidStructuredGridSource::New());
this->vtkSolidStructuredGridSourceList.GetLastItem()->
	SetStructuredGrid(reader->GetOutput());
this->VTKRenderer->AddActor(vtkSolidStructuredGridSourceList.GetLastItem()->Actor);
this->FitView();
writer->Delete();
reader->Delete();
sgrid->Delete();
}
void IaFeMesh::cb_EdgeToSolidMeshDoneButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_EdgeToSolidMeshDoneButton_i(o,v);
}

void IaFeMesh::cb_EdgeToSolidMeshCreateGroupCloseButtonhTransInterpCreateGroupCloseButton_i(Fl_Button*, void*) {
  EdgeSolidTransInterpGroup->hide();
}
void IaFeMesh::cb_EdgeToSolidMeshCreateGroupCloseButtonhTransInterpCreateGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_EdgeToSolidMeshCreateGroupCloseButtonhTransInterpCreateGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_UGridCheckBrowser_i(Fl_Check_Browser*, void*) {
  //int item = UGridCheckBrowser->value();

//if ((UGridCheckBrowser->checked(item) == 0) && (UGridCheckBrowser->nitems() == 1))
  //{
  //UGridCheckBrowser->set_checked(item);
  //}
//else
  //{
  //if (UGridCheckBrowser->checked(item))
    //{
    //UGridCheckBrowser->check_none();
    //UGridCheckBrowser->set_checked(item);
    //}
  //}
  
/*

this->Reset();
if(this->GetUGridCheckedItem())
{
this->GetUGridCheckedItem()->GetActor()->GetProperty()->SetColor(1.0,0.0,0.0);
this->VTKRenderer->RemoveActor(this->GetUGridCheckedItem()->GetActor());
this->VTKRenderer->AddActor(this->GetUGridCheckedItem()->GetActor());
this->FitView();
}

*/;
}
void IaFeMesh::cb_UGridCheckBrowser(Fl_Check_Browser* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->user_data()))->cb_UGridCheckBrowser_i(o,v);
}

void IaFeMesh::cb_EditBBMeshSeedCloseButton_i(Fl_Button*, void*) {
  EditBBMeshSeedGroup->hide();
}
void IaFeMesh::cb_EditBBMeshSeedCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_EditBBMeshSeedCloseButton_i(o,v);
}

void IaFeMesh::cb_EditBBMeshSeedComputeButton_i(Fl_Return_Button*, void*) {
  /*StructuredHexahedronMesh->SetInput(GetUGridCheckedItem()->UGrid);
StructuredHexahedronMesh->EstimateMeshSeedsBasedOnAverageElementLength(
double(EditBBMeshSeedAverageElementLengthInputButton->value()));*/
GetUGridCheckedItem()->ComputeMeshSeed(double(EditBBMeshSeedAverageElementLengthInputButton->value()));
}
void IaFeMesh::cb_EditBBMeshSeedComputeButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_EditBBMeshSeedComputeButton_i(o,v);
}

void IaFeMesh::cb_EditBBMergeNodesMergeButton_i(Fl_Return_Button*, void*) {
  if(InteractorStyleSelect->GetInteractorStyleSelectState() == 11)
{
	unstructuredgridwidget->SetEnabled(0);
}
//editunstructuredhexahedrongrid->SetUGrid(this->GetUGridCheckedItem()->UGrid);
//editunstructuredhexahedrongrid->MergeNodes(
//	double(this->EditBBMergeNodesToleranceInput->value()));
	this->vtkUGridList.Add(new vtkMimxUGrid);
	this->UGridCheckBrowser->add("MergeCells");
	this->UGridCheckBrowser->redraw();

	vtkMergeCells* mergecells = vtkMergeCells::New();
	mergecells->SetUnstructuredGrid(this->vtkUGridList.GetLastItem()->UGrid);
	mergecells->SetPointMergeTolerance(double(EditBBMergeNodesToleranceInput->value()));
	mergecells->MergeDuplicatePointsOn();
	mergecells->SetTotalNumberOfDataSets(this->UGridCheckBrowser->nchecked());
	mergecells->SetTotalNumberOfCells(1000);
	mergecells->SetTotalNumberOfPoints(1000);
	for(int i=1; i <=this->UGridCheckBrowser->nitems(); i++)
	{
		if(this->UGridCheckBrowser->checked(i))
		{
		mergecells->MergeDataSet(this->vtkUGridList.GetValue(i)->UGrid);
		}
	}
	mergecells->Finish();
	

	this->GetUGridCheckedItem()->UGrid->Modified();	
        this->VTKRenderer->AddActor(this->vtkUGridList.GetLastItem()->GetActor());
	
	mergecells->Delete();
	
	UGridCheckBrowser->check_none();
        UGridCheckBrowser->set_checked(UGridCheckBrowser->nitems());

this->FitView();
}
void IaFeMesh::cb_EditBBMergeNodesMergeButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_EditBBMergeNodesMergeButton_i(o,v);
}

void IaFeMesh::cb_EditBBMergeNodesGroupCloseButton_i(Fl_Button*, void*) {
  EditBBMergeNodesGroup->hide();
}
void IaFeMesh::cb_EditBBMergeNodesGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_EditBBMergeNodesGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_EditBBMirrorButton_i(Fl_Return_Button*, void*) {
  /*if(InteractorStyleSelect->GetInteractorStyleSelectState() == 11)
{
	unstructuredgridwidget->SetEnabled(0);
}

if(this->GetUGridCheckedItem()->UGrid)
{
vtkMimxMirrorUnstructuredHexahedronGridCell *mirror = vtkMimxMirrorUnstructuredHexahedronGridCell::New();
int axis;	int edge;
if(EditBBMirrorXAxisButton->value())	axis = 0;
if(EditBBMirrorYAxisButton->value())	axis = 1;
if(EditBBMirrorZAxisButton->value())	axis = 2;
if(EditBBPosRadioButton->value())	edge = 1;
if(EditBBNegRadioButton->value())	edge = 0;
//editunstructuredhexahedrongrid->SetUGrid(this->GetUGridCheckedItem()->UGrid);
//editunstructuredhexahedrongrid->Mirror(axis, edge);
		mirror->SetInput(this->GetUGridCheckedItem()->UGrid);
		mirror->SetAxis(axis);
		double bounds[6]; 
		this->GetUGridCheckedItem()->UGrid->GetBounds(bounds);
		mirror->SetMirrorPoint(bounds[2*axis+edge]);
		mirror->Update();
		this->VTKRenderer->RemoveActor(this->GetUGridCheckedItem()->GetActor());
       		UGridCheckBrowser->check_none();
		this->vtkUGridList.Add(new vtkMimxUGrid);
		this->UGridCheckBrowser->add("Mirror");
        	UGridCheckBrowser->set_checked(UGridCheckBrowser->nitems());
		this->GetUGridCheckedItem()->UGrid->DeepCopy(mirror->GetOutput());
		this->GetUGridCheckedItem()->UGrid->Modified();	
        	this->VTKRenderer->AddActor(this->vtkUGridList.GetLastItem()->GetActor());
		mirror->Delete();


this->FitView();
}*/
cout <<"Mirroring option no longer available"<<endl;
}
void IaFeMesh::cb_EditBBMirrorButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_EditBBMirrorButton_i(o,v);
}

void IaFeMesh::cb_EditBBMirrorGroupCloseButton_i(Fl_Button*, void*) {
  EditBBMirrorGroup->hide();
}
void IaFeMesh::cb_EditBBMirrorGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_EditBBMirrorGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_ChangeMeshSeedGroupCloseButton_i(Fl_Button*, void*) {
  unstructuredgridextractwidget->SetEnabled(0);
this->VTKRenderer->RemoveActor(this->LocalAxesActor);
if(this->LocalAxesActor)	this->LocalAxesActor->Delete();
this->LocalAxesActor = NULL;
ChangeMeshSeedGroup->hide();
this->FitView();
}
void IaFeMesh::cb_ChangeMeshSeedGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ChangeMeshSeedGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_ChangeMeshSeedComputeButton_i(Fl_Return_Button*, void*) {
  if(ChangeMeshSeedXAxisButton->value())
{
this->GetUGridCheckedItem()->ChangeMeshSeed(unstructuredgridextractwidget->ReturnPickedCell(),
	0, int(ChangeMeshSeedValueInput->value()));
				
}
else{
if(ChangeMeshSeedYAxisButton->value())
{
this->GetUGridCheckedItem()->ChangeMeshSeed(unstructuredgridextractwidget->ReturnPickedCell(),
	1, int(ChangeMeshSeedValueInput->value()));	
}
else
{
this->GetUGridCheckedItem()->ChangeMeshSeed(unstructuredgridextractwidget->ReturnPickedCell(),
	2, int(ChangeMeshSeedValueInput->value()));
}
};
}
void IaFeMesh::cb_ChangeMeshSeedComputeButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ChangeMeshSeedComputeButton_i(o,v);
}

void IaFeMesh::cb_CreateIntervertebralDiscElementSetsGroupCloseButton_i(Fl_Button*, void*) {
  CreateIntervertebralDiscElementSetsGroup->hide();
}
void IaFeMesh::cb_CreateIntervertebralDiscElementSetsGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_CreateIntervertebralDiscElementSetsGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_CreateIntervertebralDiscElementSetsGroupSelectMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
CreateIntervertebralDiscElementSetsGroup->show();
UnstructuredMeshGroup->show();
strcpy(choice , "Disc");
}
void IaFeMesh::cb_CreateIntervertebralDiscElementSetsGroupSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_CreateIntervertebralDiscElementSetsGroupSelectMenuItem_i(o,v);
}

void IaFeMesh::cb_CreateIntervertebralDiscElementSetsGroupBoundingBoxSelectMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
CreateIntervertebralDiscElementSetsGroup->show();
UnstructuredMeshGroup->show();
strcpy(choice , "BoundingBox");
}
void IaFeMesh::cb_CreateIntervertebralDiscElementSetsGroupBoundingBoxSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_CreateIntervertebralDiscElementSetsGroupBoundingBoxSelectMenuItem_i(o,v);
}

Fl_Menu_Item IaFeMesh::menu_CreateIntervertebralDiscElementSetsGroupInput[] = {
 {"None", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Intervertebral Disc", 0,  (Fl_Callback*)IaFeMesh::cb_CreateIntervertebralDiscElementSetsGroupSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Bounding Box", 0,  (Fl_Callback*)IaFeMesh::cb_CreateIntervertebralDiscElementSetsGroupBoundingBoxSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* IaFeMesh::CreateIntervertebralDiscElementSetsGroupSelectNoneMenuItem = IaFeMesh::menu_CreateIntervertebralDiscElementSetsGroupInput + 0;
Fl_Menu_Item* IaFeMesh::CreateIntervertebralDiscElementSetsGroupSelectMenuItem = IaFeMesh::menu_CreateIntervertebralDiscElementSetsGroupInput + 1;
Fl_Menu_Item* IaFeMesh::CreateIntervertebralDiscElementSetsGroupBoundingBoxSelectMenuItem = IaFeMesh::menu_CreateIntervertebralDiscElementSetsGroupInput + 2;

void IaFeMesh::cb_CreateIntervertebralDiscElementSetsGroupSelectButton_i(Fl_Button*, void*) {
  if(!strcmp(choice, "BoundingBox"))
{
	BoundingBoxUGrid = GetUGridCheckedItem()->UGrid;
}

if(!strcmp(choice, "Disc"))
{
	UGrid = GetUGridCheckedItem()->UGrid;
};
}
void IaFeMesh::cb_CreateIntervertebralDiscElementSetsGroupSelectButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_CreateIntervertebralDiscElementSetsGroupSelectButton_i(o,v);
}

void IaFeMesh::cb_CreateIntervertebralDiscElementSetsGroupCreateButton_i(Fl_Return_Button*, void*) {
  if(UGrid && BoundingBoxUGrid)
{
	vtkMimxCreateIntervertebralDiscElementSets *create = new vtkMimxCreateIntervertebralDiscElementSets;
	create->SetUnstructuredGrid(UGrid);
	create->SetBoundingBox(BoundingBoxUGrid);
	create->SetElementSetsName(
		CreateIntervertebralElementSetsNameInput->value());
//	create->SetStartingElementSetNumber(int(
	//	CreateIntervertebralDiscElementSetsGroupStartingElementSetNumberInput->value()));
	create->CreateElementSetArrays();
	delete create;
};
}
void IaFeMesh::cb_CreateIntervertebralDiscElementSetsGroupCreateButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_CreateIntervertebralDiscElementSetsGroupCreateButton_i(o,v);
}

void IaFeMesh::cb_FileOpenSTLMenuItem_i(Fl_Menu_*, void*) {
  char* FileName = NULL;
if(!(FilePath = fl_file_chooser("Open: ", "STL Files (*.stl)",FileName))) return;
else
{
	this->vtkSTLSourceList.Add(vtkMimxSTLSource::New());
	this->STLCheckBrowser->add(FilePath);
	this->STLCheckBrowser->redraw();

        STLCheckBrowser->check_none();
        STLCheckBrowser->set_checked(STLCheckBrowser->nitems());
        SurfaceGroup->show();


        vtkSTLReader *reader = vtkSTLReader::New();
        
	reader->SetFileName(FilePath);
	reader->Update();
  	
	this->GetSTLCheckedItem()->GetPolyData()->DeepCopy(reader->GetOutput());
	this->GetSTLCheckedItem()->GetPolyData()->Modified();	
        this->VTKRenderer->AddActor(this->GetSTLCheckedItem()->GetActor());
	this->FitView();
        HideAll();
        SurfaceGroup->show();

};
}
void IaFeMesh::cb_FileOpenSTLMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_FileOpenSTLMenuItem_i(o,v);
}

void IaFeMesh::cb_FileOpenVTKUnstructuredGridMenuItem_i(Fl_Menu_*, void*) {
  const char *FileName = NULL;
if(!(FilePath = fl_file_chooser("Open UnstructuredGrid: ", "VTK Files (*.vtk)",FileName))) return;
else
{
	this->vtkUGridList.Add(new vtkMimxUGrid);
	this->UGridCheckBrowser->add(FilePath);
	this->UGridCheckBrowser->redraw();

        UGridCheckBrowser->check_none();
        UGridCheckBrowser->set_checked(UGridCheckBrowser->nitems());
	
	vtkUnstructuredGridReader *reader = vtkUnstructuredGridReader::New();
	reader->SetFileName(FilePath);
	reader->Update(); 
	
	this->GetUGridCheckedItem()->UGrid->DeepCopy(reader->GetOutput());
	this->GetUGridCheckedItem()->UGrid->Modified();	
        this->VTKRenderer->AddActor(this->vtkUGridList.GetLastItem()->GetActor());
	this->FitView();
        HideAll();
	UnstructuredMeshGroup->show();
 };
}
void IaFeMesh::cb_FileOpenVTKUnstructuredGridMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_FileOpenVTKUnstructuredGridMenuItem_i(o,v);
}

void IaFeMesh::cb_FileOpenCurveMenuItem_i(Fl_Menu_*, void*) {
  const char *FileName = NULL;
if(!(FilePath = fl_file_chooser("Open: ", "VTK Files (*.vtk)",FileName))) return;
else
{
	this->vtkCurveList.Add(vtkMimxCurve::New());
	this->CurveCheckBrowser->add(FilePath);
	this->CurveCheckBrowser->redraw();

        CurveCheckBrowser->check_none();
        CurveCheckBrowser->set_checked(CurveCheckBrowser->nitems());
	
	vtkPolyDataReader *reader = vtkPolyDataReader::New();
	reader->SetFileName(FilePath);
	reader->Update(); 
	
	this->GetCurveCheckedItem()->PolyData->DeepCopy(reader->GetOutput());
	this->GetCurveCheckedItem()->PolyData->GetPoints()->
		DeepCopy(reader->GetOutput()->GetPoints());
	this->GetCurveCheckedItem()->PolyData->Modified();	
        this->VTKRenderer->AddActor(this->vtkCurveList.GetLastItem()->GetActor());
	this->FitView();
        HideAll();
	CurveGroup->show();
 };
}
void IaFeMesh::cb_FileOpenCurveMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_FileOpenCurveMenuItem_i(o,v);
}

void IaFeMesh::cb_FileOpenSurfaceMenuItem_i(Fl_Menu_*, void*) {
  const char *FileName = NULL;
if(!(FilePath = fl_file_chooser("Open: ", "VTK Files (*.vtk)",FileName))) return;
else
{
	this->vtkSTLSourceList.Add(vtkMimxSTLSource::New());
	this->STLCheckBrowser->add(FilePath);
	this->STLCheckBrowser->redraw();

        STLCheckBrowser->check_none();
        STLCheckBrowser->set_checked(STLCheckBrowser->nitems());
	
	vtkPolyDataReader *reader = vtkPolyDataReader::New();
	reader->SetFileName(FilePath);
	reader->Update(); 
	
	this->GetSTLCheckedItem()->PolyData->DeepCopy(reader->GetOutput());

	this->GetSTLCheckedItem()->PolyData->Modified();	
        this->VTKRenderer->AddActor(this->vtkSTLSourceList.GetLastItem()->GetActor());
	this->FitView();
        HideAll();
	SurfaceGroup->show();
 };
}
void IaFeMesh::cb_FileOpenSurfaceMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_FileOpenSurfaceMenuItem_i(o,v);
}

void IaFeMesh::cb_FileOpenImageMenuItem_i(Fl_Menu_*, void*) {
  const char *FileName = NULL;
if(!(FilePath = fl_file_chooser("Open Image files: ", "Img Files (*.hdr)",FileName))) return;
else
{
	this->vtkImageList.Add(new vtkMimxClipImageFromBox);
	this->ImageCheckBrowser->add(FilePath);
	this->ImageCheckBrowser->redraw();
 	
 
        ImageCheckBrowser->check_none();
        ImageCheckBrowser->set_checked(ImageCheckBrowser->nitems());
	this->GetImageCheckedItem()->SetFileName(FilePath);

	this->GetImageCheckedItem()->SetInteractor(VTKFlWindow);
	this->GetImageCheckedItem()->DisplayWidgets();

	this->FitView();
        HideAll();
       ImageGroup->show();
	
};
}
void IaFeMesh::cb_FileOpenImageMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_FileOpenImageMenuItem_i(o,v);
}

void IaFeMesh::cb_FileOpenPlanarStructuredGridMenuItem_i(Fl_Menu_*, void*) {
  const char *FileName = NULL;
if(!(FilePath = fl_file_chooser("Open Structured Planar Grid: ", "VTK Files (*.vtk)",FileName))) return;
else
{
	this->vtkPlanarStructuredGridList.Add(vtkMimxPlanarStructuredGridSource::New());
	this->StructuredPlanarMeshCheckBrowser->add(FilePath);
	this->StructuredPlanarMeshCheckBrowser->redraw();

        StructuredPlanarMeshCheckBrowser->check_none();
        StructuredPlanarMeshCheckBrowser->set_checked(StructuredPlanarMeshCheckBrowser->nitems());
	
	vtkStructuredGridReader *reader = vtkStructuredGridReader::New();
	reader->SetFileName(FilePath);
	reader->Update(); 
	
	this->GetPlanarStructuredGridCheckedItem()->SGrid->DeepCopy(reader->GetOutput());
	this->GetPlanarStructuredGridCheckedItem()->SGrid->Modified();	
        this->VTKRenderer->AddActor(this->vtkPlanarStructuredGridList.GetLastItem()->Actor);
	this->FitView();
	reader->Delete();

 };
}
void IaFeMesh::cb_FileOpenPlanarStructuredGridMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_FileOpenPlanarStructuredGridMenuItem_i(o,v);
}

void IaFeMesh::cb_FileOpenSolidStructuredGridMenuItem_i(Fl_Menu_*, void*) {
  const char *FileName = NULL;
if(!(FilePath = fl_file_chooser("Open Structured Solid Grid: ", "VTK Files (*.vtk)",FileName))) return;
else
{
	this->vtkSolidStructuredGridSourceList.Add(vtkMimxSolidStructuredGridSource::New());
	this->StructuredSolidMeshCheckBrowser->add(FilePath);
	this->StructuredSolidMeshCheckBrowser->redraw();

        StructuredSolidMeshCheckBrowser->check_none();
        StructuredSolidMeshCheckBrowser->set_checked(StructuredSolidMeshCheckBrowser->nitems());
	
	vtkStructuredGridReader *reader = vtkStructuredGridReader::New();
	reader->SetFileName(FilePath);
	reader->Update(); 
	
	this->GetSolidStructuredGridCheckedItem()->StructuredGrid->DeepCopy(reader->GetOutput());
	this->GetSolidStructuredGridCheckedItem()->StructuredGrid->Modified();	
        this->VTKRenderer->AddActor(this->vtkSolidStructuredGridSourceList.GetLastItem()->Actor);
	this->FitView();
	reader->Delete();
	StructuredSolidMeshGroup->show();
	

 };
}
void IaFeMesh::cb_FileOpenSolidStructuredGridMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_FileOpenSolidStructuredGridMenuItem_i(o,v);
}

void IaFeMesh::cb_FileWriteMenuItem_i(Fl_Menu_*, void*) {
  if(CurveGroup->visible())
{const char* FileName = NULL;

if(!(FilePath = fl_file_chooser("Write: ", "PolyData (VTK) Files (*.vtk)",FileName))) return;
else
{
	if(this->GetCurveCheckedItem())
{
	vtkPolyDataWriter *writer = vtkPolyDataWriter::New();
	writer->SetFileName(FilePath);
	writer->SetInput(this->GetCurveCheckedItem()->PolyData);
	writer->Write();
	writer->Delete();
}
};
}

if(ImageGroup->visible())
{
const char* FileName = NULL;

if(!(FilePath = fl_file_chooser("Write: ", "Image Files (*.hdr)",FileName))) return;
else
{
	if(this->GetImageCheckedItem())
	{
	typedef itk::Image<signed short, 3>  ImageType;
	typedef itk::ImageFileWriter<ImageType> WriterType;
	WriterType::Pointer writer = WriterType::New();

	writer->SetInput(GetImageCheckedItem()->GetitkImageInput());
	writer->SetFileName(FilePath);
	writer->Update();

	}
	}
}

if(UnstructuredMeshGroup->visible())
{
const char* FileName = NULL;

if(!(FilePath = fl_file_chooser("Write: ", "Unstrucutred Mesh Files (*.vtk)",FileName))) return;
else
{
	if(this->GetUGridCheckedItem())
	{
		vtkUnstructuredGridWriter *writer = vtkUnstructuredGridWriter::New();
		writer->SetFileName(FilePath);
		writer->SetInput(this->GetUGridCheckedItem()->UGrid);
		writer->Write();
		writer->Delete();
		
	}
	}
}

if(StructuredPlanarMeshGroup->visible())
{const char* FileName = NULL;

if(!(FilePath = fl_file_chooser("Write: ", "Structured Planar Mesh (VTK) Files (*.vtk)",FileName))) return;
else
{
	if(this->GetPlanarStructuredGridCheckedItem())
{
	vtkStructuredGridWriter *writer = vtkStructuredGridWriter::New();
	writer->SetFileName(FilePath);
	writer->SetInput(this->GetPlanarStructuredGridCheckedItem()->SGrid);
	writer->Write();
	writer->Delete();
}
};
}

if(SurfaceGroup->visible())
{const char* FileName = NULL;

if(!(FilePath = fl_file_chooser("Write: ", "PolyData (VTK) Files (*.vtk)",FileName))) return;
else
{
	if(this->GetSTLCheckedItem())
{
	vtkPolyDataWriter *writer = vtkPolyDataWriter::New();
	writer->SetFileName(FilePath);
	writer->SetInput(this->GetSTLCheckedItem()->PolyData);
	writer->Write();
	writer->Delete();
}
};
};
}
void IaFeMesh::cb_FileWriteMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_FileWriteMenuItem_i(o,v);
}

void IaFeMesh::cb_WriteAbaqusFileFormatMenuItem_i(Fl_Menu_*, void*) {
  if(UnstructuredMeshGroup->visible())
{
const char* FileName = NULL;

if(!(FilePath = fl_file_chooser("Write: ", "Unstrucutred Abaqus Format Files (*.inp)",FileName))) return;
else
{
	if(this->GetUGridCheckedItem())
	{
		vtkMimxAbaqusFileWriter *writer = vtkMimxAbaqusFileWriter::New();
		writer->SetFileName(FilePath);
		writer->SetInput(this->GetUGridCheckedItem()->UGrid);
		writer->Write();
		writer->Delete();
		
	}
	}
}

if(StructuredSolidMeshGroup->visible())
{
const char* FileName = NULL;

if(!(FilePath = fl_file_chooser("Write: ", "Structured Abaqus Format Files (*.inp)",FileName))) return;
else
{
	if(this->GetSolidStructuredGridCheckedItem())
	{
		vtkMimxAbaqusFileWriter *writer = vtkMimxAbaqusFileWriter::New();
		writer->SetFileName(FilePath);
		writer->SetInput(this->GetSolidStructuredGridCheckedItem()->StructuredGrid);
		writer->Write();
		writer->Delete();
		
	}
	}
}

if(SurfaceGroup->visible())
{
const char* FileName = NULL;

if(!(FilePath = fl_file_chooser("Write: ", "Surface Abaqus Format Files (*.inp)",FileName))) return;
else
{
	if(this->GetSTLCheckedItem())
	{
		vtkMimxAbaqusFileWriter *writer = vtkMimxAbaqusFileWriter::New();
		writer->SetFileName(FilePath);
		writer->SetInput(this->GetSTLCheckedItem()->GetPolyData());
		writer->Write();
		writer->Delete();
		
	}
	}
};
}
void IaFeMesh::cb_WriteAbaqusFileFormatMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_WriteAbaqusFileFormatMenuItem_i(o,v);
}

void IaFeMesh::cb_WriteSTLMenuItem_i(Fl_Menu_*, void*) {
  if(SurfaceGroup->visible())
{const char* FileName = NULL;

if(!(FilePath = fl_file_chooser("Write: ", "StereoLithography (STL) Files (*.stl)",FileName))) return;
else
{
	if(this->GetSTLCheckedItem())
{

	vtkSTLWriter *writer = vtkSTLWriter::New();
	writer->SetInput(this->GetSTLCheckedItem()->PolyData);
	writer->SetFileName(FilePath);
	writer->Write();
	writer->Delete();
}
};
};
}
void IaFeMesh::cb_WriteSTLMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_WriteSTLMenuItem_i(o,v);
}

void IaFeMesh::cb_ExitFileMenuItem_i(Fl_Menu_*, void*) {
  int choice = fl_choice("Are you sure that you want to quite", "Yes", "No", NULL);
if (choice == 0)
  {
  exit(0);
  };
}
void IaFeMesh::cb_ExitFileMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_ExitFileMenuItem_i(o,v);
}

void IaFeMesh::cb_BackGroundViewProperties_i(Fl_Menu_*, void*) {
  Fl_Color_Chooser *colorchooser =  new Fl_Color_Chooser(0,0,200,95,"BackGround Color");
colorchooser->show();
}
void IaFeMesh::cb_BackGroundViewProperties(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_BackGroundViewProperties_i(o,v);
}

void IaFeMesh::cb_PlanarMeshTransinterpMenuItem_i(Fl_Menu_*, void*) {
  PlanarTransInterpGroup->show();
}
void IaFeMesh::cb_PlanarMeshTransinterpMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_PlanarMeshTransinterpMenuItem_i(o,v);
}

void IaFeMesh::cb_PlanarMeshFromBoundingBoxMenuItem_i(Fl_Menu_*, void*) {
  /*this->vtkBoundingBoxSurfaceMeshList.Add(vtkBoundingBoxSurfaceMesh::New());
this->vtkBoundingBoxSurfaceMeshList.GetLastItem()->
	CreateSurfaceMesh(boundingbox->BoundingBoxPolyData);
this->VTKRenderer->AddActor(this->vtkBoundingBoxSurfaceMeshList.GetLastItem()
	->BoundingBoxSurfaceMeshActor);
this->VTKRenderWindow->Render();*/;
}
void IaFeMesh::cb_PlanarMeshFromBoundingBoxMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_PlanarMeshFromBoundingBoxMenuItem_i(o,v);
}

void IaFeMesh::cb_CreateBoundingBoxFromBoundsMenuItem_i(Fl_Menu_*, void*) {
  this->vtkUGridList.Add(new vtkMimxUGrid);
	this->vtkUGridList.GetLastItem()->CreateBoundingBox(this->vtkSTLSourceList.GetLastItem());
	editunstructuredhexahedrongrid->SetUGrid(this->vtkUGridList.GetLastItem()->UGrid);
	unstructuredgridwidget->SetUGrid(this->vtkUGridList.GetLastItem()->UGrid);
	this->UGridCheckBrowser->add("Bounding Box");	
	this->UGridCheckBrowser->redraw();
	UGridCheckBrowser->check_none();
	UGridCheckBrowser->set_checked(UGridCheckBrowser->nitems());
	this->VTKRenderer->AddActor(this->vtkUGridList.GetLastItem()->Actor);
	this->VTKRenderWindow->Render();
      	HideAll();
        UnstructuredMeshGroup->show();
}
void IaFeMesh::cb_CreateBoundingBoxFromBoundsMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_CreateBoundingBoxFromBoundsMenuItem_i(o,v);
}

void IaFeMesh::cb_CreateBoundingBoxFromFourPoints_i(Fl_Menu_*, void*) {
  ExtractWidgetPropertyGroup->show();
unstructuredgridextractwidget->State = 1;
unstructuredgridextractwidget->DeleteHandles();
unstructuredgridextractwidget->SetUGrid(this->GetUGridCheckedItem()->UGrid);
unstructuredgridextractwidget->SetInteractor(this->VTKFlWindow);
if(InteractorStyleSelect->GetInteractorStyleSelectState() == 11)
{
	unstructuredgridwidget->SetEnabled(0);
}
unstructuredgridextractwidget->SetEnabled(1);
InteractorStyleSelect->SetInteractorStyleSelectState(0);
DoneButton->show();
}
void IaFeMesh::cb_CreateBoundingBoxFromFourPoints(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_CreateBoundingBoxFromFourPoints_i(o,v);
}

void IaFeMesh::cb_CreateSolidMeshFromPointsMenuItem_i(Fl_Menu_*, void*) {
  /*vtkBoundingBoxToitkStrucutredSolidMesh* BoundingBoxToitkStrucutredSolidMesh = 
	new vtkBoundingBoxToitkStrucutredSolidMesh;
	BoundingBoxToitkStructuredSolidMesh->
	SetInput(this->vtkBoundingBoxSurfaceMeshList.GetLastItem());
BoundingBoxToitkStructuredSolidMesh->ConvertvtkToitk();
//typedef itk::StructuredPlanarMeshToStructuredSolidMesh<3> SolidMeshType3D;

//typedef itk::Mesh<double,3> MeshType;
//itk::StructuredPlanarMeshToStructuredSolidMesh<MeshType,MeshType>::Pointer
//   StructuredPlanarMeshToStructuredSolidMeshPointer = 
//	itk::StructuredPlanarMeshToStructuredSolidMesh<MeshType,MeshType>::New();
    BoundingBoxToitkStructuredSolidMesh->GetOutput()->SolidTransfiniteInterpolation();
     BoundingBoxToitkStructuredSolidMesh->GetOutput()->GenerateHexahedronMeshConnectivity();
    itkHexMeshTovtkPolyData* convert = new itkHexMeshTovtkPolyData;
   convert->SetInput(BoundingBoxToitkStructuredSolidMesh->GetOutput()->GetOutput());
   vtkPolyDataMapper* mapper = vtkPolyDataMapper::New();
   mapper->SetInput(convert->GetOutput());
   vtkActor* solidactor = vtkActor::New();
   solidactor->SetMapper(mapper);
   interpactor->GetProperty()->SetColor(1.0,0.0,0.0);
   this->VTKRenderer->AddActor(solidactor);*/;
}
void IaFeMesh::cb_CreateSolidMeshFromPointsMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_CreateSolidMeshFromPointsMenuItem_i(o,v);
}

void IaFeMesh::cb_CreateStructuredMeshFromBoundingBoxMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
UnstructuredMeshGroup->show();
InitializeAll();
CreateMeshFromBoundingBoxGroup->show();
//MorphBoundingBoxGroup->show();
}
void IaFeMesh::cb_CreateStructuredMeshFromBoundingBoxMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_CreateStructuredMeshFromBoundingBoxMenuItem_i(o,v);
}

void IaFeMesh::cb_MergeSolidMeshMenuItem_i(Fl_Menu_*, void*) {
  MergeSolidMeshGroup->show();
}
void IaFeMesh::cb_MergeSolidMeshMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_MergeSolidMeshMenuItem_i(o,v);
}

void IaFeMesh::cb_PickMenuItem_i(Fl_Menu_*, void*) {
  CreateCurveGroup->show();
}
void IaFeMesh::cb_PickMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_PickMenuItem_i(o,v);
}

void IaFeMesh::cb_CreateEdgeToSolidMeshMenuItem_i(Fl_Menu_*, void*) {
  for(int i=0; i<12; i++)	this->Curve[i] = NULL;
EdgeSolidTransInterpGroup->show();
}
void IaFeMesh::cb_CreateEdgeToSolidMeshMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_CreateEdgeToSolidMeshMenuItem_i(o,v);
}

void IaFeMesh::cb_CreateIrregularCylinder_i(Fl_Menu_*, void*) {
  for(int i=0; i<5; i++)
	Curve[i] = NULL;
CreateIrregularCylindricalMeshGroup->show();
}
void IaFeMesh::cb_CreateIrregularCylinder(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_CreateIrregularCylinder_i(o,v);
}

void IaFeMesh::cb_MergeFacesToSurfaceMesh_i(Fl_Menu_*, void*) {
  unstructuredgridextractwidget->State = 7;
unstructuredgridextractwidget->SetUGrid(this->GetUGridCheckedItem()->UGrid);
unstructuredgridextractwidget->SetInteractor(this->VTKFlWindow);
if(InteractorStyleSelect->GetInteractorStyleSelectState() == 11)
{
	unstructuredgridwidget->SetEnabled(0);
}
unstructuredgridextractwidget->SetEnabled(1);
DoneButton->show();
}
void IaFeMesh::cb_MergeFacesToSurfaceMesh(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_MergeFacesToSurfaceMesh_i(o,v);
}

void IaFeMesh::cb_PosteriorElementMeshMenuItem_i(Fl_Menu_*, void*) {
  CompleteSurface = NULL;
CutSurface = NULL;
BoundingBoxUGrid = NULL;
UGrid = NULL;
PosteriorElementMeshGroup->show();
}
void IaFeMesh::cb_PosteriorElementMeshMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_PosteriorElementMeshMenuItem_i(o,v);
}

void IaFeMesh::cb_IntervertebralDiscMenuItem_i(Fl_Menu_*, void*) {
  CreateIntervertebralDiscMeshGroup->show();
}
void IaFeMesh::cb_IntervertebralDiscMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_IntervertebralDiscMenuItem_i(o,v);
}

void IaFeMesh::cb_ClosestPointProjectionMenuItem_i(Fl_Menu_*, void*) {
  StructuredHexahedronMesh->MorphRectilinearHexahedronMesh(this->vtkSTLSourceList.GetLastItem()->GetPolyData());
for(int i=0; i < StructuredHexahedronMesh->StructuredGridActorCollection->
			GetNumberOfItems(); i++)
{
this->VTKRenderer->RemoveActor(((vtkActor*)(StructuredHexahedronMesh->StructuredGridActorCollection->
			GetItemAsObject(i))));
}

this->VTKRenderer->AddActor(StructuredHexahedronMesh->Actor);
this->FitView();
}
void IaFeMesh::cb_ClosestPointProjectionMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_ClosestPointProjectionMenuItem_i(o,v);
}

void IaFeMesh::cb_EditBBSplitCellMenuItem_i(Fl_Menu_*, void*) {
  unstructuredgridextractwidget->State = 2;
unstructuredgridextractwidget->SetUGrid(this->GetUGridCheckedItem()->UGrid);
unstructuredgridextractwidget->SetUGridActor(this->GetUGridCheckedItem()->GetActor());
unstructuredgridextractwidget->SetInteractor(this->VTKFlWindow);
if(InteractorStyleSelect->GetInteractorStyleSelectState() == 11)
{
	unstructuredgridwidget->SetEnabled(0);
}
unstructuredgridextractwidget->SetEnabled(1);
DoneButton->show();
//this->FitView();
}
void IaFeMesh::cb_EditBBSplitCellMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_EditBBSplitCellMenuItem_i(o,v);
}

void IaFeMesh::cb_EditBBAddCellMenuItem_i(Fl_Menu_*, void*) {
  unstructuredgridextractwidget->State = 3;
unstructuredgridextractwidget->SetUGrid(this->GetUGridCheckedItem()->UGrid);
unstructuredgridextractwidget->SetUGridActor(this->GetUGridCheckedItem()->GetActor());
unstructuredgridextractwidget->SetInteractor(this->VTKFlWindow);
if(InteractorStyleSelect->GetInteractorStyleSelectState() == 11)
{
	unstructuredgridwidget->SetEnabled(0);
}
unstructuredgridextractwidget->SetEnabled(1);
DoneButton->show();
//this->FitView();
}
void IaFeMesh::cb_EditBBAddCellMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_EditBBAddCellMenuItem_i(o,v);
}

void IaFeMesh::cb_MergeBBNodesMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
unstructuredgridextractwidget->State = 5;
unstructuredgridextractwidget->SetUGrid(this->GetUGridCheckedItem()->UGrid);
unstructuredgridextractwidget->SetUGridActor(this->GetUGridCheckedItem()->GetActor());
unstructuredgridextractwidget->SetInteractor(this->VTKFlWindow);
EditBBMergeNodesGroup->show();
}
void IaFeMesh::cb_MergeBBNodesMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_MergeBBNodesMenuItem_i(o,v);
}

void IaFeMesh::cb_MirrorBBMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
UnstructuredMeshGroup->show();
EditBBMirrorGroup->show();
}
void IaFeMesh::cb_MirrorBBMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_MirrorBBMenuItem_i(o,v);
}

void IaFeMesh::cb_EditBBMeshSeedFromAverageElementLengthMenuItem_i(Fl_Menu_*, void*) {
  /*unstructuredgridextractwidget->State = 4;
unstructuredgridextractwidget->SetUGrid(this->GetUGridCheckedItem()->UGrid);
unstructuredgridextractwidget->SetInteractor(this->VTKFlWindow);
unstructuredgridwidget->SetEnabled(0);
unstructuredgridextractwidget->SetEnabled(1);
DoneButton->show();*/
HideAll();
UnstructuredMeshGroup->show();
EditBBMeshSeedGroup->show();
}
void IaFeMesh::cb_EditBBMeshSeedFromAverageElementLengthMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_EditBBMeshSeedFromAverageElementLengthMenuItem_i(o,v);
}

void IaFeMesh::cb_ChangeMeshSeedMenuItem_i(Fl_Menu_*, void*) {
  //if(!unstructuredgridextractwidget->GetEnabled())
unstructuredgridextractwidget->State = 4;
unstructuredgridextractwidget->SetUGrid(this->GetUGridCheckedItem()->UGrid);
unstructuredgridextractwidget->SetUGridActor(this->GetUGridCheckedItem()->GetActor());
unstructuredgridextractwidget->SetInteractor(this->VTKFlWindow);
unstructuredgridextractwidget->SetEnabled(1);
DoneButton->show();
ChangeMeshSeedGroup->show();
}
void IaFeMesh::cb_ChangeMeshSeedMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_ChangeMeshSeedMenuItem_i(o,v);
}

void IaFeMesh::cb_EditBBDeleteCellMenuItem_i(Fl_Menu_*, void*) {
  unstructuredgridextractwidget->State = 5;
unstructuredgridextractwidget->SetUGrid(this->GetUGridCheckedItem()->UGrid);
unstructuredgridextractwidget->SetUGridActor(this->GetUGridCheckedItem()->GetActor());
unstructuredgridextractwidget->SetInteractor(this->VTKFlWindow);
if(InteractorStyleSelect->GetInteractorStyleSelectState() == 11)
{
	unstructuredgridwidget->SetEnabled(0);
}
unstructuredgridextractwidget->SetEnabled(1);
DoneButton->show();
}
void IaFeMesh::cb_EditBBDeleteCellMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_EditBBDeleteCellMenuItem_i(o,v);
}

void IaFeMesh::cb_EditCopyMenuItem_i(Fl_Menu_*, void*) {
  if(CurveGroup->visible())
{
	if(this->GetCurveCheckedItem())
	{
		this->vtkCurveList.Add(vtkMimxCurve::New());
		char name[10];
		strcpy(name, "Curve");
		int num = CurveCheckBrowser->nitems();
		char buffer[10];
		sprintf(buffer, "%d", num);
                //char *numchar = itoa(num,buffer,10);
		//strcat(name, numchar);
                strcat(name, buffer);
		this->CurveCheckBrowser->add(name);
		this->vtkCurveList.GetLastItem()->PolyData->DeepCopy(this->GetCurveCheckedItem()->PolyData);
		this->vtkCurveList.GetLastItem()->PolyData->GetPoints()->
			DeepCopy(this->GetCurveCheckedItem()->PolyData->GetPoints());
        	CurveCheckBrowser->check_none();
        	CurveCheckBrowser->set_checked(CurveCheckBrowser->nitems());
		this->vtkCurveList.GetLastItem()->PolyData->Modified();	
        	this->VTKRenderer->AddActor(this->vtkCurveList.GetLastItem()->GetActor());
		this->FitView();
        	HideAll();
		this->CurveCheckBrowser->redraw();
		CurveGroup->show();
	}
};
}
void IaFeMesh::cb_EditCopyMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_EditCopyMenuItem_i(o,v);
}

void IaFeMesh::cb_EdittransformMenuItem_i(Fl_Menu_*, void*) {
  TransformGroup->show();
}
void IaFeMesh::cb_EdittransformMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_EdittransformMenuItem_i(o,v);
}

void IaFeMesh::cb_EditClipMenuItem_i(Fl_Menu_*, void*) {
  ClipImageFromBoxGroup->show();
}
void IaFeMesh::cb_EditClipMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_EditClipMenuItem_i(o,v);
}

void IaFeMesh::cb_RecalculateInteriorNodesMenuItem_i(Fl_Menu_*, void*) {
  //this->StructuredHexahedronMesh->ReCalculateInteriorNodes();
//this->FitView();
RecalculateInteriorNodesGroup->show();
}
void IaFeMesh::cb_RecalculateInteriorNodesMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_RecalculateInteriorNodesMenuItem_i(o,v);
}

void IaFeMesh::cb_EditPickSurfaceMenuItem_i(Fl_Menu_*, void*) {
  PickSurfacePropertyGroup->show();
/*unstructuredgridextractwidget->State = 1;
unstructuredgridextractwidget->DeleteHandles();
unstructuredgridextractwidget->SetUGrid(this->GetUGridCheckedItem()->UGrid);
unstructuredgridextractwidget->SetInteractor(this->VTKFlWindow);
if(InteractorStyleSelect->GetInteractorStyleSelectState() == 11)
{
	unstructuredgridwidget->SetEnabled(0);
}
unstructuredgridextractwidget->SetEnabled(1);
InteractorStyleSelect->SetInteractorStyleSelectState(0);*/;
}
void IaFeMesh::cb_EditPickSurfaceMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_EditPickSurfaceMenuItem_i(o,v);
}

void IaFeMesh::cb_ExtrudeSurfaceMenuItem_i(Fl_Menu_*, void*) {
  ExtrudeSurfaceGroup->show();
}
void IaFeMesh::cb_ExtrudeSurfaceMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_ExtrudeSurfaceMenuItem_i(o,v);
}

void IaFeMesh::cb_PatchSurfaceMenItem_i(Fl_Menu_*, void*) {
  SurfaceGroup->show();
PatchSurfaceGroup->show();
}
void IaFeMesh::cb_PatchSurfaceMenItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_PatchSurfaceMenItem_i(o,v);
}

void IaFeMesh::cb_LaplacianSmoothingMenuItem_i(Fl_Menu_*, void*) {
  LaplacianSmoothingGroup->show();
}
void IaFeMesh::cb_LaplacianSmoothingMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_LaplacianSmoothingMenuItem_i(o,v);
}

void IaFeMesh::cb_EditNodeandElementNumbers_i(Fl_Menu_*, void*) {
  AbaqusFormatPropertiesGroup->show();
}
void IaFeMesh::cb_EditNodeandElementNumbers(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_EditNodeandElementNumbers_i(o,v);
}

void IaFeMesh::cb_CreateIntervertebralDiscElementSetsMenuItem_i(Fl_Menu_*, void*) {
  UnstructuredMeshGroup->show();
CreateIntervertebralDiscElementSetsGroup->show();
}
void IaFeMesh::cb_CreateIntervertebralDiscElementSetsMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_CreateIntervertebralDiscElementSetsMenuItem_i(o,v);
}

void IaFeMesh::cb_GeometryPropertyMenuItem_i(Fl_Menu_*, void*) {
  if(CurveGroup->visible())
{
	if(this->GetCurveCheckedItem())
	{
		double center[3];
		this->GetCurveCheckedItem()->CalculateCenter(center);
		GeometricCenterPropertyX->value(center[0]);
		GeometricCenterPropertyX->precision(2);
		GeometricCenterPropertyY->value(center[1]);
		GeometricCenterPropertyY->precision(2);
		GeometricCenterPropertyZ->value(center[2]);
		GeometricCenterPropertyZ->precision(2);
		GeometryPropertyGroup->show();	
	}
};
}
void IaFeMesh::cb_GeometryPropertyMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_GeometryPropertyMenuItem_i(o,v);
}

void IaFeMesh::cb_BBWidgetMenuItem_i(Fl_Menu_*, void*) {
  BBWidgetPropertyGroup->show();
}
void IaFeMesh::cb_BBWidgetMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_BBWidgetMenuItem_i(o,v);
}

void IaFeMesh::cb_MeshQualityMeasureMenuItem_i(Fl_Menu_*, void*) {
  MeshQualityGroup->show();
if(!MeshQuality) 
{ MeshQuality = vtkMeshQualityClass::New();

	MeshQuality->InitializeFromExternalMesh(this->GetUGridCheckedItem()->UGrid);
	MeshQuality->SetQualityMeasure(4);
//	MeshQuality->SetElementShrinkFactor(double(MeshQualityShrinkFactor->value()));
	this->VTKRenderer->AddActor(MeshQuality->CalculateMeshQuality());
  	this->FitView();
};
}
void IaFeMesh::cb_MeshQualityMeasureMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_MeshQualityMeasureMenuItem_i(o,v);
}

Fl_Menu_Item IaFeMesh::menu_CommonMenuBar[] = {
 {" File ", 0,  0, 0, 64, FL_EMBOSSED_LABEL, 0, 14, 0},
 {"Open", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 12, 0},
 {"STL", 0,  (Fl_Callback*)IaFeMesh::cb_FileOpenSTLMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"VTK", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Unstructured Grid", 0,  (Fl_Callback*)IaFeMesh::cb_FileOpenVTKUnstructuredGridMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Poly Data", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Curve", 0,  (Fl_Callback*)IaFeMesh::cb_FileOpenCurveMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Surface", 0,  (Fl_Callback*)IaFeMesh::cb_FileOpenSurfaceMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {"Image", 0,  (Fl_Callback*)IaFeMesh::cb_FileOpenImageMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Structured Grid", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Planar", 0,  (Fl_Callback*)IaFeMesh::cb_FileOpenPlanarStructuredGridMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Solid", 0,  (Fl_Callback*)IaFeMesh::cb_FileOpenSolidStructuredGridMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {"Write VTK", 0,  (Fl_Callback*)IaFeMesh::cb_FileWriteMenuItem, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Abaqus", 0,  (Fl_Callback*)IaFeMesh::cb_WriteAbaqusFileFormatMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Write STL", 0,  (Fl_Callback*)IaFeMesh::cb_WriteSTLMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Exit", 0x40071,  (Fl_Callback*)IaFeMesh::cb_ExitFileMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"View", 0,  0, 0, 64, FL_EMBOSSED_LABEL, 0, 14, 0},
 {"Back Ground", 0,  (Fl_Callback*)IaFeMesh::cb_BackGroundViewProperties, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {"Create", 0,  0, 0, 64, FL_EMBOSSED_LABEL, 0, 14, 0},
 {"Auto", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Planar Mesh", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Trans Interp", 0,  (Fl_Callback*)IaFeMesh::cb_PlanarMeshTransinterpMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Bounding Box", 0,  (Fl_Callback*)IaFeMesh::cb_PlanarMeshFromBoundingBoxMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"B Box", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"From bounds", 0,  (Fl_Callback*)IaFeMesh::cb_CreateBoundingBoxFromBoundsMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"4 Points", 0,  (Fl_Callback*)IaFeMesh::cb_CreateBoundingBoxFromFourPoints, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Solid Mesh", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Points", 0,  (Fl_Callback*)IaFeMesh::cb_CreateSolidMeshFromPointsMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Bounding Box", 0,  (Fl_Callback*)IaFeMesh::cb_CreateStructuredMeshFromBoundingBoxMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Merge Solid Meshes", 0,  (Fl_Callback*)IaFeMesh::cb_MergeSolidMeshMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {"Manual", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Line/Curve", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Pick", 0,  (Fl_Callback*)IaFeMesh::cb_PickMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Edge To Surface Mesh", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Edge To Solid Mesh", 0,  (Fl_Callback*)IaFeMesh::cb_CreateEdgeToSolidMeshMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Geometric primitive", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Irregular Cylinder", 0,  (Fl_Callback*)IaFeMesh::cb_CreateIrregularCylinder, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Create surface from faces", 0,  (Fl_Callback*)IaFeMesh::cb_MergeFacesToSurfaceMesh, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Posterior Element Mesh", 0,  (Fl_Callback*)IaFeMesh::cb_PosteriorElementMeshMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Intervertebral Disc", 0,  (Fl_Callback*)IaFeMesh::cb_IntervertebralDiscMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {"Project", 0,  0, 0, 64, FL_ENGRAVED_LABEL, 0, 14, 0},
 {"Closest Point", 0,  (Fl_Callback*)IaFeMesh::cb_ClosestPointProjectionMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Edit", 0,  0, 0, 64, FL_ENGRAVED_LABEL, 0, 14, 0},
 {"BB", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Split Cell", 0,  (Fl_Callback*)IaFeMesh::cb_EditBBSplitCellMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Add Cell", 0,  (Fl_Callback*)IaFeMesh::cb_EditBBAddCellMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Merge", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Nodes", 0,  (Fl_Callback*)IaFeMesh::cb_MergeBBNodesMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Mirror", 0,  (Fl_Callback*)IaFeMesh::cb_MirrorBBMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Mesh Seed", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"From Average Element length", 0,  (Fl_Callback*)IaFeMesh::cb_EditBBMeshSeedFromAverageElementLengthMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Change Mesh Seed", 0,  (Fl_Callback*)IaFeMesh::cb_ChangeMeshSeedMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Delete Cell", 0,  (Fl_Callback*)IaFeMesh::cb_EditBBDeleteCellMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Copy", 0,  (Fl_Callback*)IaFeMesh::cb_EditCopyMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Transform", 0,  (Fl_Callback*)IaFeMesh::cb_EdittransformMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Clip", 0,  (Fl_Callback*)IaFeMesh::cb_EditClipMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Recalculate Interior Nodes", 0,  (Fl_Callback*)IaFeMesh::cb_RecalculateInteriorNodesMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Pick Surface", 0,  (Fl_Callback*)IaFeMesh::cb_EditPickSurfaceMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Extrude Surface", 0,  (Fl_Callback*)IaFeMesh::cb_ExtrudeSurfaceMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Patch Surface", 0,  (Fl_Callback*)IaFeMesh::cb_PatchSurfaceMenItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Smooth", 0,  0, 0, 64, FL_ENGRAVED_LABEL, 0, 14, 0},
 {"Laplacian", 0,  (Fl_Callback*)IaFeMesh::cb_LaplacianSmoothingMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Node and Element Numbers and Sets", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Node and Element Numbers", 0,  (Fl_Callback*)IaFeMesh::cb_EditNodeandElementNumbers, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Create Element Sets", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"IntervertebralDisc", 0,  (Fl_Callback*)IaFeMesh::cb_CreateIntervertebralDiscElementSetsMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {"Property", 0,  0, 0, 64, FL_EMBOSSED_LABEL, 0, 14, 0},
 {"Geometry", 0,  (Fl_Callback*)IaFeMesh::cb_GeometryPropertyMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Widgets", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"BB", 0,  (Fl_Callback*)IaFeMesh::cb_BBWidgetMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Mesh Quality", 0,  (Fl_Callback*)IaFeMesh::cb_MeshQualityMeasureMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* IaFeMesh::FileSubMenu = IaFeMesh::menu_CommonMenuBar + 0;
Fl_Menu_Item* IaFeMesh::FileOpenSubMenu = IaFeMesh::menu_CommonMenuBar + 1;
Fl_Menu_Item* IaFeMesh::FileOpenSTLMenuItem = IaFeMesh::menu_CommonMenuBar + 2;
Fl_Menu_Item* IaFeMesh::FileOpenVTKSubMenu = IaFeMesh::menu_CommonMenuBar + 3;
Fl_Menu_Item* IaFeMesh::FileOpenVTKUnstructuredGridMenuItem = IaFeMesh::menu_CommonMenuBar + 4;
Fl_Menu_Item* IaFeMesh::FileOpenPolyDataSubMenu = IaFeMesh::menu_CommonMenuBar + 5;
Fl_Menu_Item* IaFeMesh::FileOpenCurveMenuItem = IaFeMesh::menu_CommonMenuBar + 6;
Fl_Menu_Item* IaFeMesh::FileOpenSurfaceMenuItem = IaFeMesh::menu_CommonMenuBar + 7;
Fl_Menu_Item* IaFeMesh::FileOpenImageMenuItem = IaFeMesh::menu_CommonMenuBar + 10;
Fl_Menu_Item* IaFeMesh::FileOpenStructuredGridSubMenu = IaFeMesh::menu_CommonMenuBar + 11;
Fl_Menu_Item* IaFeMesh::FileOpenPlanarStructuredGridMenuItem = IaFeMesh::menu_CommonMenuBar + 12;
Fl_Menu_Item* IaFeMesh::FileOpenSolidStructuredGridMenuItem = IaFeMesh::menu_CommonMenuBar + 13;
Fl_Menu_Item* IaFeMesh::FileWriteMenuItem = IaFeMesh::menu_CommonMenuBar + 16;
Fl_Menu_Item* IaFeMesh::WriteAbaqusFileFormatMenuItem = IaFeMesh::menu_CommonMenuBar + 17;
Fl_Menu_Item* IaFeMesh::WriteSTLMenuItem = IaFeMesh::menu_CommonMenuBar + 18;
Fl_Menu_Item* IaFeMesh::ExitFileMenuItem = IaFeMesh::menu_CommonMenuBar + 19;
Fl_Menu_Item* IaFeMesh::BackGroundViewProperties = IaFeMesh::menu_CommonMenuBar + 22;
Fl_Menu_Item* IaFeMesh::CreateSubMenu = IaFeMesh::menu_CommonMenuBar + 24;
Fl_Menu_Item* IaFeMesh::CreateAutoSubMenu = IaFeMesh::menu_CommonMenuBar + 25;
Fl_Menu_Item* IaFeMesh::PlanarMeshSubMenu = IaFeMesh::menu_CommonMenuBar + 26;
Fl_Menu_Item* IaFeMesh::PlanarMeshTransinterpMenuItem = IaFeMesh::menu_CommonMenuBar + 27;
Fl_Menu_Item* IaFeMesh::PlanarMeshFromBoundingBoxMenuItem = IaFeMesh::menu_CommonMenuBar + 28;
Fl_Menu_Item* IaFeMesh::CreateBoundingBoxSubMenu = IaFeMesh::menu_CommonMenuBar + 30;
Fl_Menu_Item* IaFeMesh::CreateBoundingBoxFromBoundsMenuItem = IaFeMesh::menu_CommonMenuBar + 31;
Fl_Menu_Item* IaFeMesh::CreateBoundingBoxFromFourPoints = IaFeMesh::menu_CommonMenuBar + 32;
Fl_Menu_Item* IaFeMesh::CreateSolidMeshSubMenu = IaFeMesh::menu_CommonMenuBar + 34;
Fl_Menu_Item* IaFeMesh::CreateSolidMeshFromPointsMenuItem = IaFeMesh::menu_CommonMenuBar + 35;
Fl_Menu_Item* IaFeMesh::CreateStructuredMeshFromBoundingBoxMenuItem = IaFeMesh::menu_CommonMenuBar + 36;
Fl_Menu_Item* IaFeMesh::MergeSolidMeshMenuItem = IaFeMesh::menu_CommonMenuBar + 37;
Fl_Menu_Item* IaFeMesh::CreateManualSubMenu = IaFeMesh::menu_CommonMenuBar + 40;
Fl_Menu_Item* IaFeMesh::LineCurveSubMenu = IaFeMesh::menu_CommonMenuBar + 41;
Fl_Menu_Item* IaFeMesh::PickMenuItem = IaFeMesh::menu_CommonMenuBar + 42;
Fl_Menu_Item* IaFeMesh::CreateEdgeToSurfaceMeshMenuItem = IaFeMesh::menu_CommonMenuBar + 44;
Fl_Menu_Item* IaFeMesh::CreateEdgeToSolidMeshMenuItem = IaFeMesh::menu_CommonMenuBar + 45;
Fl_Menu_Item* IaFeMesh::GeometricPrimitiveSubMenu = IaFeMesh::menu_CommonMenuBar + 46;
Fl_Menu_Item* IaFeMesh::CreateIrregularCylinder = IaFeMesh::menu_CommonMenuBar + 47;
Fl_Menu_Item* IaFeMesh::MergeFacesToSurfaceMesh = IaFeMesh::menu_CommonMenuBar + 49;
Fl_Menu_Item* IaFeMesh::PosteriorElementMeshMenuItem = IaFeMesh::menu_CommonMenuBar + 50;
Fl_Menu_Item* IaFeMesh::IntervertebralDiscMenuItem = IaFeMesh::menu_CommonMenuBar + 51;
Fl_Menu_Item* IaFeMesh::ProjectSubMenu = IaFeMesh::menu_CommonMenuBar + 54;
Fl_Menu_Item* IaFeMesh::ClosestPointProjectionMenuItem = IaFeMesh::menu_CommonMenuBar + 55;
Fl_Menu_Item* IaFeMesh::EditSubMenu = IaFeMesh::menu_CommonMenuBar + 57;
Fl_Menu_Item* IaFeMesh::EditBBSubMenu = IaFeMesh::menu_CommonMenuBar + 58;
Fl_Menu_Item* IaFeMesh::EditBBSplitCellMenuItem = IaFeMesh::menu_CommonMenuBar + 59;
Fl_Menu_Item* IaFeMesh::EditBBAddCellMenuItem = IaFeMesh::menu_CommonMenuBar + 60;
Fl_Menu_Item* IaFeMesh::MergeBBSubMenu = IaFeMesh::menu_CommonMenuBar + 61;
Fl_Menu_Item* IaFeMesh::MergeBBNodesMenuItem = IaFeMesh::menu_CommonMenuBar + 62;
Fl_Menu_Item* IaFeMesh::MirrorBBMenuItem = IaFeMesh::menu_CommonMenuBar + 64;
Fl_Menu_Item* IaFeMesh::EditBBMeshSeedSubMenu = IaFeMesh::menu_CommonMenuBar + 65;
Fl_Menu_Item* IaFeMesh::EditBBMeshSeedFromAverageElementLengthMenuItem = IaFeMesh::menu_CommonMenuBar + 66;
Fl_Menu_Item* IaFeMesh::ChangeMeshSeedMenuItem = IaFeMesh::menu_CommonMenuBar + 67;
Fl_Menu_Item* IaFeMesh::EditBBDeleteCellMenuItem = IaFeMesh::menu_CommonMenuBar + 69;
Fl_Menu_Item* IaFeMesh::EditCopyMenuItem = IaFeMesh::menu_CommonMenuBar + 71;
Fl_Menu_Item* IaFeMesh::EdittransformMenuItem = IaFeMesh::menu_CommonMenuBar + 72;
Fl_Menu_Item* IaFeMesh::EditClipMenuItem = IaFeMesh::menu_CommonMenuBar + 73;
Fl_Menu_Item* IaFeMesh::RecalculateInteriorNodesMenuItem = IaFeMesh::menu_CommonMenuBar + 74;
Fl_Menu_Item* IaFeMesh::EditPickSurfaceMenuItem = IaFeMesh::menu_CommonMenuBar + 75;
Fl_Menu_Item* IaFeMesh::ExtrudeSurfaceMenuItem = IaFeMesh::menu_CommonMenuBar + 76;
Fl_Menu_Item* IaFeMesh::PatchSurfaceMenItem = IaFeMesh::menu_CommonMenuBar + 77;
Fl_Menu_Item* IaFeMesh::SurfaceSmoothSubMenu = IaFeMesh::menu_CommonMenuBar + 78;
Fl_Menu_Item* IaFeMesh::LaplacianSmoothingMenuItem = IaFeMesh::menu_CommonMenuBar + 79;
Fl_Menu_Item* IaFeMesh::EditNodeAndElementNumbersNodeSetsElementSetsEtc = IaFeMesh::menu_CommonMenuBar + 81;
Fl_Menu_Item* IaFeMesh::EditNodeandElementNumbers = IaFeMesh::menu_CommonMenuBar + 82;
Fl_Menu_Item* IaFeMesh::CreateElementSetsSubMenu = IaFeMesh::menu_CommonMenuBar + 83;
Fl_Menu_Item* IaFeMesh::CreateIntervertebralDiscElementSetsMenuItem = IaFeMesh::menu_CommonMenuBar + 84;
Fl_Menu_Item* IaFeMesh::PropertySubMenu = IaFeMesh::menu_CommonMenuBar + 88;
Fl_Menu_Item* IaFeMesh::GeometryPropertyMenuItem = IaFeMesh::menu_CommonMenuBar + 89;
Fl_Menu_Item* IaFeMesh::WidgetPropertySubMenu = IaFeMesh::menu_CommonMenuBar + 90;
Fl_Menu_Item* IaFeMesh::BBWidgetMenuItem = IaFeMesh::menu_CommonMenuBar + 91;
Fl_Menu_Item* IaFeMesh::MeshQualityMeasureMenuItem = IaFeMesh::menu_CommonMenuBar + 93;

void IaFeMesh::cb_SurfaceDistMapClosestPointItem_i(Fl_Menu_*, void*) {
  SurfaceDistanceMapGroup->show();
SurfaceSource = NULL;
SurfaceTarget = NULL;
}
void IaFeMesh::cb_SurfaceDistMapClosestPointItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_SurfaceDistMapClosestPointItem_i(o,v);
}

Fl_Menu_Item IaFeMesh::menu_SurfaceMenuBar[] = {
 {"Dist Map", 0,  0, 0, 64, FL_ENGRAVED_LABEL, 0, 14, 0},
 {"Closest Point", 0,  (Fl_Callback*)IaFeMesh::cb_SurfaceDistMapClosestPointItem, 0, 0, FL_EMBOSSED_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Rig Reg", 0,  0, 0, 64, FL_ENGRAVED_LABEL, 0, 14, 0},
 {"ICP", 0,  0, 0, 0, FL_EMBOSSED_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* IaFeMesh::SurfaceDistMapSubMenu = IaFeMesh::menu_SurfaceMenuBar + 0;
Fl_Menu_Item* IaFeMesh::SurfaceDistMapClosestPointItem = IaFeMesh::menu_SurfaceMenuBar + 1;
Fl_Menu_Item* IaFeMesh::SurfaceRigidRegistrationSubMenu = IaFeMesh::menu_SurfaceMenuBar + 3;
Fl_Menu_Item* IaFeMesh::SurfaceRigRegICPMenuItem = IaFeMesh::menu_SurfaceMenuBar + 4;

void IaFeMesh::cb_InteractionRotateMenuItem_i(Fl_Menu_*, void*) {
  if(InteractorStyleSelect->GetInteractorStyleSelectState() == 11)
{
	unstructuredgridwidget->SetEnabled(0);
}
if(unstructuredgridextractwidget->GetEnabled())
	unstructuredgridextractwidget->SetEnabled(0);
InteractorStyleSelect->SetInteractorStyleSelectState(1);
BBWidgetPropertyGroup->hide();
}
void IaFeMesh::cb_InteractionRotateMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_InteractionRotateMenuItem_i(o,v);
}

#include <FL/Fl_Pixmap.H>
static const char *idata_rotate[] = {
"30 29 -4 1",
"!\231\231\231\"\314\231\231#\314\314\314$\377\377\377",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#",
"##############################",
"!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""
};
static Fl_Pixmap image_rotate(idata_rotate);

void IaFeMesh::cb_InteractorPanMenuItem_i(Fl_Menu_*, void*) {
  if(InteractorStyleSelect->GetInteractorStyleSelectState() == 11)
{
	unstructuredgridwidget->SetEnabled(0);
}
if(unstructuredgridextractwidget->GetEnabled())
	unstructuredgridextractwidget->SetEnabled(0);
InteractorStyleSelect->SetInteractorStyleSelectState(2);
BBWidgetPropertyGroup->hide();
}
void IaFeMesh::cb_InteractorPanMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_InteractorPanMenuItem_i(o,v);
}

static const char *idata_pan[] = {
"29 30 -5 1",
"!\0\0\0\"\231\231\231#\314\231\231$\314\314\314%\377\377\377",
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
"\"$\"$\"$\"$\"$\"$\"$\"$\"$\"$\"$\"$\"$\"$\"",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"\"$\"$\"$\"$\"$\"$\"$\"$\"$\"$\"$\"$\"$\"$\"",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"\"$\"$\"$\"$\"$\"$\"!!$\"$\"$\"$\"$\"$\"$\"",
"$$$$$$$$$$$$!!!!$$$$$$$$$$$$$",
"\"$\"$\"$\"$\"$\"!!!!!!$\"$\"$\"$\"$\"$\"",
"$$$$$$$$$$!!!!!!!!$$$$$$$$$$$",
"\"$\"$\"$\"$\"$\"$!!!!\"$\"$\"$\"$\"$\"$\"",
"$$$$$$$$$$$$!!!!$$$$$$$$$$$$$",
"\"$\"$\"$\"!\"$\"$!!!!\"$\"$!$\"$\"$\"$\"",
"$$$$$$!!$$$$!!!!$$$$!!$$$$$$$",
"\"$\"$\"!!!!!!!!!!!!!!!!!!$\"$\"$\"",
"$$$$!!!!!!!!!!!!!!!!!!!!$$$$$",
"\"$\"$!!!!!!!!!!!!!!!!!!!!\"$\"$\"",
"$$$$$!!!!!!!!!!!!!!!!!!$$$$$$",
"\"$\"$\"$!!\"$\"$!!!!\"$\"$!!\"$\"$\"$\"",
"$$$$$$$!$$$$!!!!$$$$!$$$$$$$$",
"\"$\"$\"$\"$\"$\"$!!!!\"$\"$\"$\"$\"$\"$\"",
"$$$$$$$$$$$$!!!!$$$$$$$$$$$$$",
"\"$\"$\"$\"$\"$!!!!!!!!\"$\"$\"$\"$\"$\"",
"$$$$$$$$$$$!!!!!!$$$$$$$$$$$$",
"\"$\"$\"$\"$\"$\"$!!!!\"$\"$\"$\"$\"$\"$\"",
"$$$$$$$$$$$$$!!$$$$$$$$$$$$$$",
"\"$\"$\"$\"$\"$\"$\"$\"$\"$\"$\"$\"$\"$\"$\"",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$%",
"%%%%%########################",
"#############################",
"#############################"
};
static Fl_Pixmap image_pan(idata_pan);

void IaFeMesh::cb_InteractorZoomMenuItem_i(Fl_Menu_*, void*) {
  if(InteractorStyleSelect->GetInteractorStyleSelectState() == 11)
{
	unstructuredgridwidget->SetEnabled(0);
}
if(unstructuredgridextractwidget->GetEnabled())
	unstructuredgridextractwidget->SetEnabled(0);
InteractorStyleSelect->SetInteractorStyleSelectState(4);
BBWidgetPropertyGroup->hide();
}
void IaFeMesh::cb_InteractorZoomMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_InteractorZoomMenuItem_i(o,v);
}

static const char *idata_zoom[] = {
"30 30 -4 1",
"!\231\231\231\"\314\231\231#\314\314\314$\377\377\377",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#",
"##############################",
"!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""
};
static Fl_Pixmap image_zoom(idata_zoom);

void IaFeMesh::cb_InteractorTraceMenuItem_i(Fl_Menu_*, void*) {
  if(unstructuredgridextractwidget->GetEnabled())
	unstructuredgridextractwidget->SetEnabled(0);
HideAll();
CurveGroup->show();
CreateCurveGroup->show();
CurvePickStartEndGroup->show();
BBWidgetPropertyGroup->hide();
}
void IaFeMesh::cb_InteractorTraceMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_InteractorTraceMenuItem_i(o,v);
}

static const char *idata_trace[] = {
"29 30 -3 1",
"!\231\231\231\"\314\231\231#\314\314\314",
"#############################",
"!#!#!#!#!#!#!#!#!#!#!#!#!#!#!",
"#############################",
"!#!#!#!#!#!#!#!#!#!#!#!#!#!#!",
"#############################",
"!#!#!#!#!#!#!#!#!\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""
};
static Fl_Pixmap image_trace(idata_trace);

void IaFeMesh::cb_InteractionBoundingBoxMenuItem_i(Fl_Menu_*, void*) {
  if(unstructuredgridextractwidget->GetEnabled())
	unstructuredgridextractwidget->SetEnabled(0);
unstructuredgridwidget->SetInteractor(this->VTKFlWindow);
if(!unstructuredgridwidget->GetEnabled())
{
	editunstructuredhexahedrongrid->SetUGrid(this->GetUGridCheckedItem()->UGrid);
	unstructuredgridwidget->SetUGrid(this->GetUGridCheckedItem()->UGrid);
	InteractorStyleSelect->SetInteractorStyleSelectState(11);
	unstructuredgridwidget->Execute();
	unstructuredgridwidget->SetEnabled(1);
	BBWidgetPropertyGroup->show();
}
else
{
	unstructuredgridwidget->SetEnabled(0);
	BBWidgetPropertyGroup->hide();
};
}
void IaFeMesh::cb_InteractionBoundingBoxMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_InteractionBoundingBoxMenuItem_i(o,v);
}

Fl_Menu_Item IaFeMesh::menu_InteractionModeMenuBar[] = {
 {0, 0x40072,  (Fl_Callback*)IaFeMesh::cb_InteractionRotateMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0x40073,  (Fl_Callback*)IaFeMesh::cb_InteractorPanMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0x4007a,  (Fl_Callback*)IaFeMesh::cb_InteractorZoomMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0x40074,  (Fl_Callback*)IaFeMesh::cb_InteractorTraceMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"BB", 0x40062,  (Fl_Callback*)IaFeMesh::cb_InteractionBoundingBoxMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* IaFeMesh::InteractionRotateMenuItem = IaFeMesh::menu_InteractionModeMenuBar + 0;
Fl_Menu_Item* IaFeMesh::InteractorPanMenuItem = IaFeMesh::menu_InteractionModeMenuBar + 1;
Fl_Menu_Item* IaFeMesh::InteractorZoomMenuItem = IaFeMesh::menu_InteractionModeMenuBar + 2;
Fl_Menu_Item* IaFeMesh::InteractorTraceMenuItem = IaFeMesh::menu_InteractionModeMenuBar + 3;
Fl_Menu_Item* IaFeMesh::InteractionBoundingBoxMenuItem = IaFeMesh::menu_InteractionModeMenuBar + 4;

void IaFeMesh::cb_DoneButton_i(Fl_Button*, void*) {
  unstructuredgridextractwidget->SetEnabled(0);

if(unstructuredgridextractwidget->State == 2)
{
//editunstructuredhexahedrongrid->SplitCell

	if(this->GetUGridCheckedItem()->UGrid)
	{
		vtkMimxSplitUnstructuredHexahedronGridCell *split = vtkMimxSplitUnstructuredHexahedronGridCell::New();
		split->SetInput(this->GetUGridCheckedItem()->UGrid);
		vtkIdList *idlist = vtkIdList::New();
		idlist->SetNumberOfIds(2);
		idlist->SetId(0,unstructuredgridextractwidget->PointsList[0]);
		idlist->SetId(1,unstructuredgridextractwidget->PointsList[1]);
		split->SetIdList(idlist);
		split->Update();
	//(unstructuredgridextractwidget->PointsList);
	this->vtkUGridList.Add(new vtkMimxUGrid);
	this->UGridCheckBrowser->add("Split Cell");
	this->UGridCheckBrowser->redraw();
	this->VTKRenderer->RemoveActor(this->GetUGridCheckedItem()->GetActor());
       		UGridCheckBrowser->check_none();

        	UGridCheckBrowser->set_checked(UGridCheckBrowser->nitems());
		this->GetUGridCheckedItem()->UGrid->DeepCopy(split->GetOutput());
		this->GetUGridCheckedItem()->UGrid->Modified();	
        	this->VTKRenderer->AddActor(this->vtkUGridList.GetLastItem()->GetActor());
        	
        	this->vtkUGridList.GetLastItem()->GetActor()->GetProperty()->SetRepresentationToWireframe( );
        	
		split->Delete();
		idlist->Delete();	
	}
}

if(unstructuredgridextractwidget->State == 3)
{
//editunstructuredhexahedrongrid->AddCell
	//(unstructuredgridextractwidget->PointsList);
	if(this->GetUGridCheckedItem()->UGrid)
	{
		vtkMimxAddUnstructuredHexahedronGridCell *add = vtkMimxAddUnstructuredHexahedronGridCell::New();
		add->SetInput(this->GetUGridCheckedItem()->UGrid);
		add->SetExtrusionLength(5.0);
		vtkIdList *idlist = vtkIdList::New();
		idlist->SetNumberOfIds(4);
for(int i=0; i<4; i++)	idlist->SetId(i,unstructuredgridextractwidget->PointsList[i]);
		add->SetIdList(idlist);
		add->Update();
	this->vtkUGridList.Add(new vtkMimxUGrid);
	this->UGridCheckBrowser->add("Add Cell");
	this->UGridCheckBrowser->redraw();
	this->VTKRenderer->RemoveActor(this->GetUGridCheckedItem()->GetActor());
       		UGridCheckBrowser->check_none();
        	UGridCheckBrowser->set_checked(UGridCheckBrowser->nitems());
		this->GetUGridCheckedItem()->UGrid->DeepCopy(add->GetOutput());
		this->GetUGridCheckedItem()->UGrid->Modified();	
        	this->VTKRenderer->AddActor(this->vtkUGridList.GetLastItem()->GetActor());
        	this->vtkUGridList.GetLastItem()->GetActor()->GetProperty()->SetRepresentationToWireframe( );
		add->Delete();
		idlist->Delete();	
	}

}

if(unstructuredgridextractwidget->State == 4)
{
//this->LocalAxesActor->Initialize();
if(!this->LocalAxesActor)	LocalAxesActor = vtkLocalAxesActor::New();
vtkPoints *points = vtkPoints::New();
points->SetNumberOfPoints(3);
points->SetPoint(0,this->GetUGridCheckedItem()->UGrid->GetPoint(
unstructuredgridextractwidget->PointsList[3]));
points->SetPoint(1,this->GetUGridCheckedItem()->UGrid->GetPoint(
unstructuredgridextractwidget->PointsList[4]));
points->SetPoint(2,this->GetUGridCheckedItem()->UGrid->GetPoint(
unstructuredgridextractwidget->PointsList[1]));
this->LocalAxesActor->SetOrigin(this->GetUGridCheckedItem()->UGrid->GetPoint(
unstructuredgridextractwidget->PointsList[0]));
this->LocalAxesActor->SetAxesPoints(points);
points->Delete();
this->VTKRenderer->AddViewProp(this->LocalAxesActor);
int dim[3];
if(unstructuredgridextractwidget->ReturnPickedCell() !=-1)
{
	((vtkIntArray*)this->GetUGridCheckedItem()->UGrid->GetCellData()->GetVectors())->GetTupleValue(
	unstructuredgridextractwidget->ReturnPickedCell(), dim);
cout << "Cell Num "<< unstructuredgridextractwidget->ReturnPickedCell()<< "  "<<dim[0]<<
"  "<<dim[1]<<"  "<<dim[2]<<endl;
}
}

if(unstructuredgridextractwidget->State == 5)
{
	if(this->GetUGridCheckedItem()->UGrid)
	{
		vtkMimxDeleteUnstructuredHexahedronGridCell *deletecell = vtkMimxDeleteUnstructuredHexahedronGridCell::New();
		deletecell->SetInput(this->GetUGridCheckedItem()->UGrid);
		deletecell->SetCellNum(unstructuredgridextractwidget->ReturnPickedCell());
		deletecell->Update();
	this->vtkUGridList.Add(new vtkMimxUGrid);
	this->UGridCheckBrowser->add("Delete Cell");
	this->UGridCheckBrowser->redraw();
	this->VTKRenderer->RemoveActor(this->GetUGridCheckedItem()->GetActor());
       		UGridCheckBrowser->check_none();
        	UGridCheckBrowser->set_checked(UGridCheckBrowser->nitems());
		this->GetUGridCheckedItem()->UGrid->DeepCopy(deletecell->GetOutput());
		this->GetUGridCheckedItem()->UGrid->Modified();	
		this->vtkUGridList.GetLastItem()->GetActor()->GetProperty()->SetColor(
			this->vtkUGridList.GetLastItem()->GetActor()->GetProperty()->GetColor());
        	this->VTKRenderer->AddActor(this->vtkUGridList.GetLastItem()->GetActor());
        	this->vtkUGridList.GetLastItem()->GetActor()->GetProperty()->SetRepresentationToWireframe( );
		deletecell->Delete();

	}		

}

this->VTKRenderWindow->Render();
//this->FitView();
DoneButton->hide();
}
void IaFeMesh::cb_DoneButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->user_data()))->cb_DoneButton_i(o,v);
}

Fl_Menu_Item IaFeMesh::menu_RotateTransformAxisChoice[] = {
 {"none", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"X", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Y", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Z", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* IaFeMesh::RotateNoneMenuItem = IaFeMesh::menu_RotateTransformAxisChoice + 0;
Fl_Menu_Item* IaFeMesh::RotateXMenuItem = IaFeMesh::menu_RotateTransformAxisChoice + 1;
Fl_Menu_Item* IaFeMesh::RotateYMenuItem = IaFeMesh::menu_RotateTransformAxisChoice + 2;
Fl_Menu_Item* IaFeMesh::RotateZMenuItem = IaFeMesh::menu_RotateTransformAxisChoice + 3;

void IaFeMesh::cb_TransformGroupCloseButton_i(Fl_Button*, void*) {
  TransformGroup->hide();
}
void IaFeMesh::cb_TransformGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_TransformGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_TransformDoneButton_i(Fl_Return_Button*, void*) {
  if(CurveGroup->visible())
{
	if(this->GetCurveCheckedItem())
	{
		if(TranslateTransformRadioButton->value())
		{
		this->GetCurveCheckedItem()->Translate(double(TransformTranslateX->value()),
			double(TransformTranslateY->value()), double(TransformTranslateZ->value()));
		}
		if(ScaleTransformRadioButton->value())
		{
			double Center[3];
			Center[0] = double(this->TransformCenterX->value());
			Center[1] = double(this->TransformCenterY->value());
			Center[2] = double(this->TransformCenterZ->value());
			this->GetCurveCheckedItem()->Scale(Center,
				double(this->TransformScaleFactor->value()));
		}
		this->FitView();
	}
}

/*if(SurfaceGroup->visible())
{
	if(this->GetSTLCheckedItem())
	{
		if(TranslateTransformRadioButton->value())
		{
		this->GetSTLCheckedItem()->Translate(double(TransformTranslateX->value()),
			double(TransformTranslateY->value()), double(TransformTranslateZ->value()));
		}
		if(ScaleTransformRadioButton->value())
		{
			double Center[3];
			Center[0] = double(this->TransformCenterX->value());
			Center[1] = double(this->TransformCenterY->value());
			Center[2] = double(this->TransformCenterZ->value());
			this->GetSTLCheckedItem()->Scale(Center,
				double(this->TransformScaleFactor->value()));
		}
		if(RotateTransformRadioButton->value())
		{
			double Center[3];
			Center[0] = double(this->TransformCenterX->value());
			Center[1] = double(this->TransformCenterY->value());
			Center[2] = double(this->TransformCenterZ->value());
			this->GetSTLCheckedItem()->Rotate(Center,
				double(this->TransformScaleFactor->value()));
	
		}
		this->FitView();
	}
}*/;
}
void IaFeMesh::cb_TransformDoneButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_TransformDoneButton_i(o,v);
}

void IaFeMesh::cb_GeometryPropertyGroupCloseButton_i(Fl_Button*, void*) {
  GeometryPropertyGroup->hide();
}
void IaFeMesh::cb_GeometryPropertyGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_GeometryPropertyGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_BBWidgetRadiusInput_i(Fl_Value_Input*, void*) {
  unstructuredgridwidget->SetEnabled(0);
unstructuredgridwidget->SetHandleSize(double(BBWidgetRadiusInput->value()));
unstructuredgridwidget->SetEnabled(1);
}
void IaFeMesh::cb_BBWidgetRadiusInput(Fl_Value_Input* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_BBWidgetRadiusInput_i(o,v);
}

void IaFeMesh::cb_PickSurfaceRadiusInput_i(Fl_Value_Input*, void*) {
  unstructuredgridextractwidget->SetEnabled(0);
unstructuredgridextractwidget->SetHandleSize(double(ExtractWidgetRadiusInput->value()));

unstructuredgridextractwidget->SetEnabled(1);
}
void IaFeMesh::cb_PickSurfaceRadiusInput(Fl_Value_Input* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_PickSurfaceRadiusInput_i(o,v);
}

void IaFeMesh::cb_PickSurfaceClearButton_i(Fl_Button*, void*) {
  unstructuredgridextractwidget->SetEnabled(0);
unstructuredgridextractwidget->GetPointIdList()->Initialize();
unstructuredgridextractwidget->DeleteHandles();
unstructuredgridextractwidget->SetEnabled(1);
}
void IaFeMesh::cb_PickSurfaceClearButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_PickSurfaceClearButton_i(o,v);
}

void IaFeMesh::cb_PickSurfacePropertyGroupCloseButton_i(Fl_Button*, void*) {
  PickSurfacePropertyGroup->hide();
}
void IaFeMesh::cb_PickSurfacePropertyGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_PickSurfacePropertyGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_PickSurfacePropertyGroupDoneButton_i(Fl_Return_Button*, void*) {
  // for the unstructured grid cell
vtkPointLocator *poiloc = vtkPointLocator::New();
poiloc->SetDataSet(GetSTLCheckedItem()->GetPolyData());
poiloc->BuildLocator();
vtkIdList *idlist = vtkIdList::New();

if(this->GetCurveCheckedItem())
{
	idlist->SetNumberOfIds(this->GetCurveCheckedItem()->PolyData->GetNumberOfPoints());
	for(int i=0; i<this->GetCurveCheckedItem()->PolyData->GetNumberOfPoints(); i++)
	{
		idlist->SetId(i, poiloc->FindClosestPoint(
			this->GetCurveCheckedItem()->PolyData->GetPoint(i)));		
	}
vtkMimxSelectSurface *selectsurface = vtkMimxSelectSurface::New();
selectsurface->SetInput(GetSTLCheckedItem()->GetPolyData());
selectsurface->SetLoop(idlist);
selectsurface->Update();
if(selectsurface->GetOutput())
{     
  	this->vtkSTLSourceList.Add(vtkMimxSTLSource::New());
	this->STLCheckBrowser->add("Select Surface");
	this->STLCheckBrowser->redraw();

        STLCheckBrowser->check_none();
        STLCheckBrowser->set_checked(STLCheckBrowser->nitems());

  	
	this->GetSTLCheckedItem()->GetPolyData()->DeepCopy(selectsurface->GetOutput());
	this->GetSTLCheckedItem()->GetPolyData()->Modified();	
        this->VTKRenderer->AddActor(this->GetSTLCheckedItem()->GetActor());
	this->FitView();
        HideAll();
        SurfaceGroup->show();
}
selectsurface->Delete();
}
poiloc->Delete();
idlist->Delete();
}
void IaFeMesh::cb_PickSurfacePropertyGroupDoneButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_PickSurfacePropertyGroupDoneButton_i(o,v);
}

void IaFeMesh::cb_SelectSurfaceStopPickingButton_i(Fl_Button*, void*) {
  unstructuredgridextractwidget->SetEnabled(0);
}
void IaFeMesh::cb_SelectSurfaceStopPickingButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_SelectSurfaceStopPickingButton_i(o,v);
}

void IaFeMesh::cb_SelectSurfaceStartPickingButton_i(Fl_Button*, void*) {
  unstructuredgridextractwidget->SetEnabled(1);
}
void IaFeMesh::cb_SelectSurfaceStartPickingButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_SelectSurfaceStartPickingButton_i(o,v);
}

void IaFeMesh::cb_MeshQualityShrinkFactor_i(Fl_Value_Input*, void*) {
  if(this->GetUGridCheckedItem()->UGrid)
{
	MeshQuality->SetElementShrinkFactor(double(MeshQualityShrinkFactor->value()));
	MeshQuality->UpdatePipeline();
  	this->FitView();
};
}
void IaFeMesh::cb_MeshQualityShrinkFactor(Fl_Value_Input* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_MeshQualityShrinkFactor_i(o,v);
}

void IaFeMesh::cb_MeshQualityGroupCloseButton_i(Fl_Button*, void*) {
  MeshQualityGroup->hide();
}
void IaFeMesh::cb_MeshQualityGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_MeshQualityGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_MergeSolidMeshMergeButton_i(Fl_Return_Button*, void*) {
  int numele = 0;
	int numnodes = 0;
	int dim[3];
	//	estimate number of nodes and elements
	int i = 1;
	int count = 0;
	do
	{
		if(this->UGridCheckBrowser->checked(i))	
		{
			count++;
			numnodes = numnodes + this->vtkUGridList.GetValue(i)->UGrid->GetNumberOfPoints();
			numele = numele + this->vtkUGridList.GetValue(i)->UGrid->GetNumberOfCells();			
		}
		i++;
	}while(i <= this->UGridCheckBrowser->nitems());


	if(numele && numnodes)
	{

		vtkDataSetCollection *collection = vtkDataSetCollection::New();
		collection->InitTraversal();
	
		vtkMimxMergeNodesPointAndCellData *merge = new vtkMimxMergeNodesPointAndCellData;


		i=1;	
		do
		{
			if(this->UGridCheckBrowser->checked(i))	
			{
				collection->AddItem(this->vtkUGridList.GetValue(i)->UGrid);		
			}
		i++;
		}while(i <= this->UGridCheckBrowser->nitems());
		
		merge->SetDataSetCollection(collection);
		if(merge->MergeDataSets())
		{
			this->vtkUGridList.Add(new vtkMimxUGrid);
			this->UGridCheckBrowser->add("MergeSolidGrids");
			this->UGridCheckBrowser->redraw();
			UGridCheckBrowser->check_none();
        		UGridCheckBrowser->set_checked(UGridCheckBrowser->nitems());

        		this->GetUGridCheckedItem()->UGrid->DeepCopy(merge->GetMergedDataSet());
			this->GetUGridCheckedItem()->UGrid->Modified();	
        		this->VTKRenderer->AddActor(this->vtkUGridList.GetLastItem()->GetActor());
        		this->FitView();

		}	
		collection->Delete();
		delete merge;	
		
	};
}
void IaFeMesh::cb_MergeSolidMeshMergeButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_MergeSolidMeshMergeButton_i(o,v);
}

void IaFeMesh::cb_MergeSolidMeshGroupCloseButton_i(Fl_Button*, void*) {
  MergeSolidMeshGroup->hide();
}
void IaFeMesh::cb_MergeSolidMeshGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_MergeSolidMeshGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_AbaqusFormatPropertiesGroupCloseButton_i(Fl_Button*, void*) {
  AbaqusFormatPropertiesGroup->hide();
}
void IaFeMesh::cb_AbaqusFormatPropertiesGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_AbaqusFormatPropertiesGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_ApplyNodesElementNumbersNoneSelectMenuItem_i(Fl_Menu_*, void*) {
  strcpy(choice ,"");
}
void IaFeMesh::cb_ApplyNodesElementNumbersNoneSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_ApplyNodesElementNumbersNoneSelectMenuItem_i(o,v);
}

void IaFeMesh::cb_ApplyNodesElementNumbersUnstructuredGridSelectMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
AbaqusFormatPropertiesGroup->show();
UnstructuredMeshGroup->show();
strcpy(choice ,"UGrid");
}
void IaFeMesh::cb_ApplyNodesElementNumbersUnstructuredGridSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_ApplyNodesElementNumbersUnstructuredGridSelectMenuItem_i(o,v);
}

Fl_Menu_Item IaFeMesh::menu_ApplyNodesElementNumbersMeshInput[] = {
 {"None", 0,  (Fl_Callback*)IaFeMesh::cb_ApplyNodesElementNumbersNoneSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Unstructured Grid", 0,  (Fl_Callback*)IaFeMesh::cb_ApplyNodesElementNumbersUnstructuredGridSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* IaFeMesh::ApplyNodesElementNumbersNoneSelectMenuItem = IaFeMesh::menu_ApplyNodesElementNumbersMeshInput + 0;
Fl_Menu_Item* IaFeMesh::ApplyNodesElementNumbersUnstructuredGridSelectMenuItem = IaFeMesh::menu_ApplyNodesElementNumbersMeshInput + 1;

void IaFeMesh::cb_ApplyNodesElementNumbersMeshSelectButton_i(Fl_Button*, void*) {
  if(!strcmp(choice, "UGrid"))
{
	UGrid = GetUGridCheckedItem()->UGrid;
};
}
void IaFeMesh::cb_ApplyNodesElementNumbersMeshSelectButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_ApplyNodesElementNumbersMeshSelectButton_i(o,v);
}

void IaFeMesh::cb_ApplyNodeElementNumberNodeNumberApplyButton_i(Fl_Button*, void*) {
  if(UGrid)
{
	vtkMimxApplyNodeElementNumbers *apply = new vtkMimxApplyNodeElementNumbers;
	apply->SetUnstructuredGrid(UGrid);
	apply->SetStartingNodeNumber(int(AbaqusFormatPropertiesGroupStartingNodeNumberInput->value()));
	apply->ApplyNodeNumbers();
	delete apply;
};
}
void IaFeMesh::cb_ApplyNodeElementNumberNodeNumberApplyButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_ApplyNodeElementNumberNodeNumberApplyButton_i(o,v);
}

void IaFeMesh::cb_ApplyNodeElementNumberElementNumberApplyButton_i(Fl_Button*, void*) {
  if(UGrid)
{
	vtkMimxApplyNodeElementNumbers *apply = new vtkMimxApplyNodeElementNumbers;
	apply->SetElementSetName(AbaqusFormatElementSetNameInput->value());
	apply->SetUnstructuredGrid(UGrid);
	apply->SetStartingElementNumber(int(AbaqusFormatPropertiesGroupStartingElementNumberInput->value()));
	apply->ApplyElementNumbers();
	delete apply;
};
}
void IaFeMesh::cb_ApplyNodeElementNumberElementNumberApplyButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_ApplyNodeElementNumberElementNumberApplyButton_i(o,v);
}

void IaFeMesh::cb_DisplayGroupShowButton_i(Fl_Button*, void*) {
  if(SurfaceGroup->visible())
{
	if(this->GetSTLCheckedItem())
		this->VTKRenderer->AddActor(this->GetSTLCheckedItem()->GetActor());
}

if(ImageGroup->visible())
{
	if(this->GetImageCheckedItem())
		this->GetImageCheckedItem()->EnableImagePlaneWidget(1);
}

if(CurveGroup->visible())
{
	if(this->GetCurveCheckedItem())
		this->VTKRenderer->AddActor(this->GetCurveCheckedItem()->GetActor());
}

if(UnstructuredMeshGroup->visible())
{
	if(this->GetUGridCheckedItem())
		this->VTKRenderer->AddActor(this->GetUGridCheckedItem()->GetActor());
}
this->FitView();
}
void IaFeMesh::cb_DisplayGroupShowButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_DisplayGroupShowButton_i(o,v);
}

void IaFeMesh::cb_DisplayGroupHideButton_i(Fl_Button*, void*) {
  if(SurfaceGroup->visible())
{
	if(this->GetSTLCheckedItem())
		this->VTKRenderer->RemoveActor(this->GetSTLCheckedItem()->GetActor());
}

if(ImageGroup->visible())
{
	if(this->GetImageCheckedItem())
		this->GetImageCheckedItem()->EnableImagePlaneWidget(0);
}

if(CurveGroup->visible())
{
	if(this->GetCurveCheckedItem())
		this->VTKRenderer->RemoveActor(this->GetCurveCheckedItem()->GetActor());
}

if(UnstructuredMeshGroup->visible())
{
	if(this->GetUGridCheckedItem())
		this->VTKRenderer->RemoveActor(this->GetUGridCheckedItem()->GetActor());
}
this->FitView();
}
void IaFeMesh::cb_DisplayGroupHideButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_DisplayGroupHideButton_i(o,v);
}

void IaFeMesh::cb_DisplayGroupDeleteButton_i(Fl_Button*, void*) {
  if(SurfaceGroup->visible())
{
	if(this->GetSTLCheckedItem())
	{
		DeleteSTLCheckBrowserEntries();
	}
}

/*if(ImageGroup->visible())
{
	if(this->GetImageCheckedItem())
		this->GetImageCheckedItem()->EnableImagePlaneWidget(1);
}

if(CurveGroup->visible())
{
	if(this->GetCurveCheckedItem())
		this->VTKRenderer->AddActor(this->GetCurveCheckedItem()->GetActor());
}*/

if(UnstructuredMeshGroup->visible())
{
	if(this->GetUGridCheckedItem())
	{
		DeleteUGridCheckBrowserEntries();
	}
};
}
void IaFeMesh::cb_DisplayGroupDeleteButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_DisplayGroupDeleteButton_i(o,v);
}

void IaFeMesh::cb_PosteriorElementCompleteSurfaceRadioButton_i(Fl_Round_Button*, void*) {
  if(GetSTLCheckedItem())
{
	CompleteSurface = GetSTLCheckedItem()->GetPolyData();
}
else
{
	cout << "Should choose a Complete surface"<<endl;
};
}
void IaFeMesh::cb_PosteriorElementCompleteSurfaceRadioButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->user_data()))->cb_PosteriorElementCompleteSurfaceRadioButton_i(o,v);
}

void IaFeMesh::cb_PosteriorElementCutSurfaceRadioButton_i(Fl_Round_Button*, void*) {
  if(GetSTLCheckedItem())
{
	CutSurface = GetSTLCheckedItem()->GetPolyData();
}
else
{
	cout << "Should choose a Cut surface"<<endl;
};
}
void IaFeMesh::cb_PosteriorElementCutSurfaceRadioButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->user_data()))->cb_PosteriorElementCutSurfaceRadioButton_i(o,v);
}

void IaFeMesh::cb_PosteriorElementBoundingBoxRadioButton_i(Fl_Round_Button*, void*) {
  if(GetUGridCheckedItem())
{
	BoundingBoxUGrid = GetUGridCheckedItem()->UGrid;
}
else
{
	cout << "Should choose a Bounding box structure"<<endl;
};
}
void IaFeMesh::cb_PosteriorElementBoundingBoxRadioButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->user_data()))->cb_PosteriorElementBoundingBoxRadioButton_i(o,v);
}

void IaFeMesh::cb_PosteriorElementVertebralBodyRadioButton_i(Fl_Round_Button*, void*) {
  if(GetUGridCheckedItem())
{
	UGrid = GetUGridCheckedItem()->UGrid;
}
else
{
	cout << "Should choose a Vertebral Body Mesh"<<endl;
};
}
void IaFeMesh::cb_PosteriorElementVertebralBodyRadioButton(Fl_Round_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->parent()->user_data()))->cb_PosteriorElementVertebralBodyRadioButton_i(o,v);
}

void IaFeMesh::cb_PosteriorElementMeshReturnButton_i(Fl_Return_Button*, void*) {
  vtkMimxAttachBoundingBoxMesh *attach = vtkMimxAttachBoundingBoxMesh::New();

	attach->SetInput(UGrid);
	attach->SetBoundingBox(BoundingBoxUGrid);
	attach->SetCompleteSource(CompleteSurface);
	attach->SetCutSource(CutSurface);
	attach->Update();
	if(attach->GetOutput())
	{
		this->vtkUGridList.Add(new vtkMimxUGrid);
		this->UGridCheckBrowser->add("Modified Input");
		this->UGridCheckBrowser->redraw();

        	UGridCheckBrowser->check_none();
       		UGridCheckBrowser->set_checked(UGridCheckBrowser->nitems());
	
		this->GetUGridCheckedItem()->UGrid->DeepCopy(attach->GetModifiedInput());
		this->GetUGridCheckedItem()->UGrid->Modified();	
        	this->VTKRenderer->AddActor(this->vtkUGridList.GetLastItem()->GetActor());
		this->FitView();

		this->vtkUGridList.Add(new vtkMimxUGrid);
		this->UGridCheckBrowser->add("Attach");

		this->UGridCheckBrowser->redraw();

        	UGridCheckBrowser->check_none();
       		UGridCheckBrowser->set_checked(UGridCheckBrowser->nitems());
	
		this->GetUGridCheckedItem()->UGrid->DeepCopy(attach->GetOutput());
		this->GetUGridCheckedItem()->UGrid->Modified();	
        	this->VTKRenderer->AddActor(this->vtkUGridList.GetLastItem()->GetActor());
		this->FitView();
 
	}
	attach->Delete();
}
void IaFeMesh::cb_PosteriorElementMeshReturnButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_PosteriorElementMeshReturnButton_i(o,v);
}

void IaFeMesh::cb_PosteriorElementMeshGroupCloseButton_i(Fl_Button*, void*) {
  PosteriorElementMeshGroup->hide();
}
void IaFeMesh::cb_PosteriorElementMeshGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_PosteriorElementMeshGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_PosteriorElementMeshSmoothReturnButton_i(Fl_Return_Button*, void*) {
  vtkMimxSmoothUnstructuredGridFilter *smooth = vtkMimxSmoothUnstructuredGridFilter::New();
//	smooth->SetConstrainedSmoothing(1);
	smooth->SetSource(CompleteSurface);
	smooth->SetInput(GetUGridCheckedItem()->UGrid);
	smooth->SetNumberOfIterations(int(PosteriorElementMeshSmoothingNumberOfIterations->value()));
	smooth->Update();
	if(smooth->GetOutput())
	{
	vtkGeometryFilter *fil = vtkGeometryFilter::New();
	fil->SetInput(GetUGridCheckedItem()->UGrid);
	fil->Update();
	for (int i=0; i < fil->GetOutput()->GetNumberOfCells(); i++) 
	{
		double maxangle = vtkMeshQuality::QuadMaxAngle(fil->GetOutput()->GetCell(i));
		double minangle = vtkMeshQuality::QuadMinAngle(fil->GetOutput()->GetCell(i));
		if(maxangle > 179)
		{
			cout << endl;
			cout << "Cell Num " << i<<"Angle  "<<maxangle<<endl;
		}
		if(minangle < 1)
		{
			cout << "Cell Num " <<i<<"Angle  "<<maxangle<<endl;
		}
	}
	fil->Delete();	
	GetUGridCheckedItem()->UGrid->GetPoints()->DeepCopy(smooth->GetOutput()->GetPoints());
	GetUGridCheckedItem()->UGrid->GetPointData()->SetScalars(smooth->GetOutput()->GetPointData()->GetScalars());

	}
	smooth->Delete();
	this->FitView();
}
void IaFeMesh::cb_PosteriorElementMeshSmoothReturnButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_PosteriorElementMeshSmoothReturnButton_i(o,v);
}

void IaFeMesh::cb_PosteriorElementRecalculateInteriorNodesButton_i(Fl_Button*, void*) {
  vtkMimxRecalculateInteriorNodes *recalc = vtkMimxRecalculateInteriorNodes::New();
//	smooth->SetConstrainedSmoothing(1);
	recalc->SetBoundingBox(BoundingBoxUGrid);
	recalc->SetInput(GetUGridCheckedItem()->UGrid);

	recalc->Update();
	if(recalc->GetOutput())
	{
		GetUGridCheckedItem()->UGrid->GetPoints()->DeepCopy(recalc->GetOutput()->GetPoints());
		GetUGridCheckedItem()->UGrid->GetPointData()->SetScalars(recalc->GetOutput()->GetPointData()->GetScalars());
	}
	recalc->Delete();
	this->FitView();
}
void IaFeMesh::cb_PosteriorElementRecalculateInteriorNodesButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_PosteriorElementRecalculateInteriorNodesButton_i(o,v);
}

void IaFeMesh::cb_CreateMeshFromBoundingBoxGoupCloseButton_i(Fl_Button*, void*) {
  CreateMeshFromBoundingBoxGroup->hide();
}
void IaFeMesh::cb_CreateMeshFromBoundingBoxGoupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateMeshFromBoundingBoxGoupCloseButton_i(o,v);
}

void IaFeMesh::cb_CreateMeshFromBoundingBoxBoundingBoxSelectMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
CreateMeshFromBoundingBoxGroup->show();
UnstructuredMeshGroup->show();
strcpy(choice , "BoundingBox");
}
void IaFeMesh::cb_CreateMeshFromBoundingBoxBoundingBoxSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateMeshFromBoundingBoxBoundingBoxSelectMenuItem_i(o,v);
}

void IaFeMesh::cb_CreateMeshFromBoundingBoxSurfaceSelectMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
CreateMeshFromBoundingBoxGroup->show();
SurfaceGroup->show();
strcpy(choice ,"Surface");
}
void IaFeMesh::cb_CreateMeshFromBoundingBoxSurfaceSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateMeshFromBoundingBoxSurfaceSelectMenuItem_i(o,v);
}

Fl_Menu_Item IaFeMesh::menu_CreateMeshFromBoundingBoxGroupInput[] = {
 {"None", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Bounding Box", 0,  (Fl_Callback*)IaFeMesh::cb_CreateMeshFromBoundingBoxBoundingBoxSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Surface", 0,  (Fl_Callback*)IaFeMesh::cb_CreateMeshFromBoundingBoxSurfaceSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* IaFeMesh::CreateMeshFromBoundingBoxNoneMenuItem = IaFeMesh::menu_CreateMeshFromBoundingBoxGroupInput + 0;
Fl_Menu_Item* IaFeMesh::CreateMeshFromBoundingBoxBoundingBoxSelectMenuItem = IaFeMesh::menu_CreateMeshFromBoundingBoxGroupInput + 1;
Fl_Menu_Item* IaFeMesh::CreateMeshFromBoundingBoxSurfaceSelectMenuItem = IaFeMesh::menu_CreateMeshFromBoundingBoxGroupInput + 2;

void IaFeMesh::cb_CreateMeshFromBoundingBoxSelectButton_i(Fl_Button*, void*) {
  if(!strcmp(choice, "BoundingBox"))
{
	BoundingBoxUGrid = GetUGridCheckedItem()->UGrid;
}

if(!strcmp(choice, "Surface"))
{
	CompleteSurface = GetSTLCheckedItem()->GetPolyData();
};
}
void IaFeMesh::cb_CreateMeshFromBoundingBoxSelectButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateMeshFromBoundingBoxSelectButton_i(o,v);
}

void IaFeMesh::cb_CreateMeshFromBoundingBoxMeshButton_i(Fl_Return_Button*, void*) {
  vtkMimxUnstructuredGridFromBoundingBox *ugrid = vtkMimxUnstructuredGridFromBoundingBox::New();
	ugrid->SetSurface(CompleteSurface);
	ugrid->SetBoundingBox(BoundingBoxUGrid);
	ugrid->Update();
	if(ugrid->GetOutput())
	{
	this->vtkUGridList.Add(new vtkMimxUGrid);
	this->UGridCheckBrowser->add("UGridFromBox");
	this->UGridCheckBrowser->redraw();

        UGridCheckBrowser->check_none();
        UGridCheckBrowser->set_checked(UGridCheckBrowser->nitems());
	
	
	this->GetUGridCheckedItem()->UGrid->DeepCopy(ugrid->GetOutput());
	this->GetUGridCheckedItem()->UGrid->Modified();	
        this->VTKRenderer->AddActor(this->vtkUGridList.GetLastItem()->GetActor());
	this->FitView();
        HideAll();
	UnstructuredMeshGroup->show();
	}
	ugrid->Delete();
	this->FitView();
}
void IaFeMesh::cb_CreateMeshFromBoundingBoxMeshButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateMeshFromBoundingBoxMeshButton_i(o,v);
}

void IaFeMesh::cb_RecalculateInteriorNodesGoupCloseButton_i(Fl_Button*, void*) {
  RecalculateInteriorNodesGroup->hide();
}
void IaFeMesh::cb_RecalculateInteriorNodesGoupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_RecalculateInteriorNodesGoupCloseButton_i(o,v);
}

void IaFeMesh::cb_RecalculateInteriorNodesNoneSelectMenuItem_i(Fl_Menu_*, void*) {
  strcpy(choice ,"");
}
void IaFeMesh::cb_RecalculateInteriorNodesNoneSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_RecalculateInteriorNodesNoneSelectMenuItem_i(o,v);
}

void IaFeMesh::cb_RecalculateInteriorNodesBoundingBoxSelectMenuItem_i(Fl_Menu_*, void*) {
  UnstructuredMeshGroup->show();
strcpy(choice ,"BoundingBox");
}
void IaFeMesh::cb_RecalculateInteriorNodesBoundingBoxSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_RecalculateInteriorNodesBoundingBoxSelectMenuItem_i(o,v);
}

void IaFeMesh::cb_RecalculateInteriorNodesUnstructuredGridSelectMenuItem_i(Fl_Menu_*, void*) {
  UnstructuredMeshGroup->show();
strcpy(choice ,"UnstructuredSolidMesh");
}
void IaFeMesh::cb_RecalculateInteriorNodesUnstructuredGridSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_RecalculateInteriorNodesUnstructuredGridSelectMenuItem_i(o,v);
}

Fl_Menu_Item IaFeMesh::menu_RecalculateInteriorNodesGoupInput[] = {
 {"None", 0,  (Fl_Callback*)IaFeMesh::cb_RecalculateInteriorNodesNoneSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Bounding Box", 0,  (Fl_Callback*)IaFeMesh::cb_RecalculateInteriorNodesBoundingBoxSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Unstructured Grid", 0,  (Fl_Callback*)IaFeMesh::cb_RecalculateInteriorNodesUnstructuredGridSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* IaFeMesh::RecalculateInteriorNodesNoneSelectMenuItem = IaFeMesh::menu_RecalculateInteriorNodesGoupInput + 0;
Fl_Menu_Item* IaFeMesh::RecalculateInteriorNodesBoundingBoxSelectMenuItem = IaFeMesh::menu_RecalculateInteriorNodesGoupInput + 1;
Fl_Menu_Item* IaFeMesh::RecalculateInteriorNodesUnstructuredGridSelectMenuItem = IaFeMesh::menu_RecalculateInteriorNodesGoupInput + 2;

void IaFeMesh::cb_RecalculateInteriorNodesSelectButton_i(Fl_Button*, void*) {
  if(!strcmp(choice, "BoundingBox"))
{
	BoundingBoxUGrid = GetUGridCheckedItem()->UGrid;
}

if(!strcmp(choice, "UnstructuredSolidMesh"))
{
	UGrid = GetUGridCheckedItem()->UGrid;
};
}
void IaFeMesh::cb_RecalculateInteriorNodesSelectButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_RecalculateInteriorNodesSelectButton_i(o,v);
}

void IaFeMesh::cb_RecalculateInteriorNodesButton_i(Fl_Return_Button*, void*) {
  vtkMimxRecalculateInteriorNodes *recalc = vtkMimxRecalculateInteriorNodes::New();
//	smooth->SetConstrainedSmoothing(1);
	recalc->SetBoundingBox(BoundingBoxUGrid);
	recalc->SetInput(UGrid);

	recalc->Update();
	if(recalc->GetOutput())
	{
	this->vtkUGridList.Add(new vtkMimxUGrid);
	this->UGridCheckBrowser->add("Recalc");
	this->UGridCheckBrowser->redraw();

        UGridCheckBrowser->check_none();
        UGridCheckBrowser->set_checked(UGridCheckBrowser->nitems());
	
	
	this->GetUGridCheckedItem()->UGrid->DeepCopy(recalc->GetOutput());
	this->GetUGridCheckedItem()->UGrid->Modified();	
        this->VTKRenderer->AddActor(this->vtkUGridList.GetLastItem()->GetActor());
	this->FitView();
        HideAll();
	UnstructuredMeshGroup->show();
	}
	recalc->Delete();
	this->FitView();
}
void IaFeMesh::cb_RecalculateInteriorNodesButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_RecalculateInteriorNodesButton_i(o,v);
}

void IaFeMesh::cb_LaplacinaSmoothingGroupCloseButton_i(Fl_Button*, void*) {
  LaplacianSmoothingGroup->hide();
}
void IaFeMesh::cb_LaplacinaSmoothingGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_LaplacinaSmoothingGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_LaplacianSmoothingUGridSelectMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
LaplacianSmoothingGroup->show();
UnstructuredMeshGroup->show();
strcpy(choice , "UnstructuredMesh");
}
void IaFeMesh::cb_LaplacianSmoothingUGridSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_LaplacianSmoothingUGridSelectMenuItem_i(o,v);
}

void IaFeMesh::cb_LaplacianSmoothingSurfaceSelectMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
LaplacianSmoothingGroup->show();
SurfaceGroup->show();
strcpy(choice ,"Surface");
}
void IaFeMesh::cb_LaplacianSmoothingSurfaceSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_LaplacianSmoothingSurfaceSelectMenuItem_i(o,v);
}

Fl_Menu_Item IaFeMesh::menu_LaplacianSmoothingGroupInput[] = {
 {"None", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Unstructured Mesh", 0,  (Fl_Callback*)IaFeMesh::cb_LaplacianSmoothingUGridSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Surface", 0,  (Fl_Callback*)IaFeMesh::cb_LaplacianSmoothingSurfaceSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* IaFeMesh::LaplacianSmoothingSelectNoneMenuItem = IaFeMesh::menu_LaplacianSmoothingGroupInput + 0;
Fl_Menu_Item* IaFeMesh::LaplacianSmoothingUGridSelectMenuItem = IaFeMesh::menu_LaplacianSmoothingGroupInput + 1;
Fl_Menu_Item* IaFeMesh::LaplacianSmoothingSurfaceSelectMenuItem = IaFeMesh::menu_LaplacianSmoothingGroupInput + 2;

void IaFeMesh::cb_LaplacianSmoothingSelectButton_i(Fl_Button*, void*) {
  if(!strcmp(choice, "UnstructuredMesh"))
{
	UGrid = GetUGridCheckedItem()->UGrid;
}

if(!strcmp(choice, "Surface"))
{
	CompleteSurface = GetSTLCheckedItem()->GetPolyData();
};
}
void IaFeMesh::cb_LaplacianSmoothingSelectButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_LaplacianSmoothingSelectButton_i(o,v);
}

void IaFeMesh::cb_LaplacianSmoothingMeshButton_i(Fl_Return_Button*, void*) {
  vtkMimxSmoothUnstructuredGridFilter *smooth = vtkMimxSmoothUnstructuredGridFilter::New();
//	interp->SetConstrainedSmoothing(1);
	smooth->SetSource(CompleteSurface);
	smooth->SetInput(UGrid);
//	interp->SetNumberOfIterations(5);
	smooth->Update();
	
	if(smooth->GetOutput())
	{
		UGrid->GetPoints()->DeepCopy(smooth->GetOutput()->GetPoints());
		UGrid->GetPoints()->Modified();
		FitView();
	}
	smooth->Delete();
}
void IaFeMesh::cb_LaplacianSmoothingMeshButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_LaplacianSmoothingMeshButton_i(o,v);
}

void IaFeMesh::cb_IrregularCylinderMeshButton_i(Fl_Return_Button*, void*) {
  if(Curve[0] != NULL && Curve[1] != NULL &&
	Curve[2] != NULL && Curve[3] != NULL )
{

	this->vtkUGridList.Add(new vtkMimxUGrid);
	this->UGridCheckBrowser->add("Cylindrical Mesh");
	this->UGridCheckBrowser->redraw();

        UGridCheckBrowser->check_none();
        UGridCheckBrowser->set_checked(UGridCheckBrowser->nitems());
	vtkMimxCylindricalMesh *cylmesh = vtkMimxCylindricalMesh::New();
	for(int i=0; i <4; i++)	cylmesh->SetCurve(i,Curve[i]->PolyData);
	cylmesh->SetBoundingBox(BoundingBoxUGrid);
	cylmesh->SetSource(CompleteSurface);
	cylmesh->Update();
        UGridCheckBrowser->check_none();
        UGridCheckBrowser->set_checked(UGridCheckBrowser->nitems());
	
	this->GetUGridCheckedItem()->UGrid->DeepCopy(cylmesh->GetOutput());
	this->GetUGridCheckedItem()->UGrid->Modified();	
        this->VTKRenderer->AddActor(this->vtkUGridList.GetLastItem()->GetActor());
	this->FitView();
        HideAll();
	UnstructuredMeshGroup->show();
};
}
void IaFeMesh::cb_IrregularCylinderMeshButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_IrregularCylinderMeshButton_i(o,v);
}

void IaFeMesh::cb_CreateIrregularCylinderMeshGroupCloseButton_i(Fl_Button*, void*) {
  CreateIrregularCylindricalMeshGroup->hide();
}
void IaFeMesh::cb_CreateIrregularCylinderMeshGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIrregularCylinderMeshGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_CreateIrregularCylinderCurveNoneSelectMenuItem_i(Fl_Menu_*, void*) {
  strcpy(choice ,"");
}
void IaFeMesh::cb_CreateIrregularCylinderCurveNoneSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIrregularCylinderCurveNoneSelectMenuItem_i(o,v);
}

void IaFeMesh::cb_CreateIrregularCylinderCurveSuperiorInnerSelectMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
CreateIrregularCylindricalMeshGroup->show();
CurveGroup->show();
strcpy(choice ,"SuperiorInner");
}
void IaFeMesh::cb_CreateIrregularCylinderCurveSuperiorInnerSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIrregularCylinderCurveSuperiorInnerSelectMenuItem_i(o,v);
}

void IaFeMesh::cb_CreateIrregularCylinderCurveSuperiorOuterSelectMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
CreateIrregularCylindricalMeshGroup->show();
CurveGroup->show();
strcpy(choice ,"SuperiorOuter");
}
void IaFeMesh::cb_CreateIrregularCylinderCurveSuperiorOuterSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIrregularCylinderCurveSuperiorOuterSelectMenuItem_i(o,v);
}

void IaFeMesh::cb_CreateIrregularCylinderCurveInferiorInnerSelectMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
CreateIrregularCylindricalMeshGroup->show();
CurveGroup->show();
strcpy(choice ,"InferiorInner");
}
void IaFeMesh::cb_CreateIrregularCylinderCurveInferiorInnerSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIrregularCylinderCurveInferiorInnerSelectMenuItem_i(o,v);
}

void IaFeMesh::cb_CreateIrregularCylinderCurveInferiorOuterSelectMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
CreateIrregularCylindricalMeshGroup->show();
CurveGroup->show();
strcpy(choice ,"InferiorOuter");
}
void IaFeMesh::cb_CreateIrregularCylinderCurveInferiorOuterSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIrregularCylinderCurveInferiorOuterSelectMenuItem_i(o,v);
}

Fl_Menu_Item IaFeMesh::menu_CreateIrregularCylinderGoupTraceInput[] = {
 {"None", 0,  (Fl_Callback*)IaFeMesh::cb_CreateIrregularCylinderCurveNoneSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Superior Inner", 0,  (Fl_Callback*)IaFeMesh::cb_CreateIrregularCylinderCurveSuperiorInnerSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Superior Outer", 0,  (Fl_Callback*)IaFeMesh::cb_CreateIrregularCylinderCurveSuperiorOuterSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Inferior Inner", 0,  (Fl_Callback*)IaFeMesh::cb_CreateIrregularCylinderCurveInferiorInnerSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Inferior Outer", 0,  (Fl_Callback*)IaFeMesh::cb_CreateIrregularCylinderCurveInferiorOuterSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* IaFeMesh::CreateIrregularCylinderCurveNoneSelectMenuItem = IaFeMesh::menu_CreateIrregularCylinderGoupTraceInput + 0;
Fl_Menu_Item* IaFeMesh::CreateIrregularCylinderCurveSuperiorInnerSelectMenuItem = IaFeMesh::menu_CreateIrregularCylinderGoupTraceInput + 1;
Fl_Menu_Item* IaFeMesh::CreateIrregularCylinderCurveSuperiorOuterSelectMenuItem = IaFeMesh::menu_CreateIrregularCylinderGoupTraceInput + 2;
Fl_Menu_Item* IaFeMesh::CreateIrregularCylinderCurveInferiorInnerSelectMenuItem = IaFeMesh::menu_CreateIrregularCylinderGoupTraceInput + 3;
Fl_Menu_Item* IaFeMesh::CreateIrregularCylinderCurveInferiorOuterSelectMenuItem = IaFeMesh::menu_CreateIrregularCylinderGoupTraceInput + 4;

void IaFeMesh::cb_CreateIrregularCylinderCurveSelectButton_i(Fl_Button*, void*) {
  if(!strcmp(choice, "SuperiorInner"))
{
	Curve[0] = GetCurveCheckedItem();
}

if(!strcmp(choice, "SuperiorOuter"))
{
	Curve[1] = GetCurveCheckedItem();
}

if(!strcmp(choice, "InferiorInner"))
{
	Curve[2] = GetCurveCheckedItem();
}
if(!strcmp(choice, "InferiorOuter"))
{
	Curve[3] = GetCurveCheckedItem();
};
}
void IaFeMesh::cb_CreateIrregularCylinderCurveSelectButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIrregularCylinderCurveSelectButton_i(o,v);
}

void IaFeMesh::cb_CreateIrregularCylinderBoundingBoxNoneSelectMenuItem_i(Fl_Menu_*, void*) {
  strcpy(choice ,"");
}
void IaFeMesh::cb_CreateIrregularCylinderBoundingBoxNoneSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIrregularCylinderBoundingBoxNoneSelectMenuItem_i(o,v);
}

void IaFeMesh::cb_CreateIrregularCylinderCurveCreateBoundingBoxNewSelectMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
CreateIrregularCylindricalMeshGroup->show();
UnstructuredMeshGroup->show();
strcpy(choice ,"CreateNewBoundingBox");
}
void IaFeMesh::cb_CreateIrregularCylinderCurveCreateBoundingBoxNewSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIrregularCylinderCurveCreateBoundingBoxNewSelectMenuItem_i(o,v);
}

void IaFeMesh::cb_CreateIrregularCylinderCurveSelectExistingBoundingBoxSelectMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
CreateIrregularCylindricalMeshGroup->show();
UnstructuredMeshGroup->show();
strcpy(choice ,"SelectExisting");
}
void IaFeMesh::cb_CreateIrregularCylinderCurveSelectExistingBoundingBoxSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIrregularCylinderCurveSelectExistingBoundingBoxSelectMenuItem_i(o,v);
}

Fl_Menu_Item IaFeMesh::menu_CreateIrregularCylinderGoupBoundingBoxInput[] = {
 {"None", 0,  (Fl_Callback*)IaFeMesh::cb_CreateIrregularCylinderBoundingBoxNoneSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Create New", 0,  (Fl_Callback*)IaFeMesh::cb_CreateIrregularCylinderCurveCreateBoundingBoxNewSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Select Existing", 0,  (Fl_Callback*)IaFeMesh::cb_CreateIrregularCylinderCurveSelectExistingBoundingBoxSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* IaFeMesh::CreateIrregularCylinderBoundingBoxNoneSelectMenuItem = IaFeMesh::menu_CreateIrregularCylinderGoupBoundingBoxInput + 0;
Fl_Menu_Item* IaFeMesh::CreateIrregularCylinderCurveCreateBoundingBoxNewSelectMenuItem = IaFeMesh::menu_CreateIrregularCylinderGoupBoundingBoxInput + 1;
Fl_Menu_Item* IaFeMesh::CreateIrregularCylinderCurveSelectExistingBoundingBoxSelectMenuItem = IaFeMesh::menu_CreateIrregularCylinderGoupBoundingBoxInput + 2;

void IaFeMesh::cb_CreateIrregularCylinderBoundingBoxSelectButton_i(Fl_Button*, void*) {
  if(!strcmp(choice, "CreateNewBoundingBox"))
{
	if(CompleteSurface)
	{
		vtkMimxButterflyMeshFromBounds *butterfly = 
			vtkMimxButterflyMeshFromBounds::New();
		butterfly->SetBounds(CompleteSurface->GetBounds());
		butterfly->SetNumberOfLayers(2);
		butterfly->Update();
		if(butterfly->GetOutput())
		{
			this->vtkUGridList.Add(new vtkMimxUGrid);
			this->UGridCheckBrowser->add("Butterfly Mesh");
			this->UGridCheckBrowser->redraw();
	
 		       UGridCheckBrowser->check_none();
 		       UGridCheckBrowser->set_checked(UGridCheckBrowser->nitems());	
	
			this->GetUGridCheckedItem()->UGrid->DeepCopy(butterfly->GetOutput());
			this->GetUGridCheckedItem()->UGrid->Modified();	
  		      this->VTKRenderer->AddActor(this->vtkUGridList.GetLastItem()->GetActor());
			this->FitView();

			UnstructuredMeshGroup->show();

		}
		butterfly->Delete();
		BoundingBoxUGrid = this->GetUGridCheckedItem()->UGrid;	
	}
}


if(!strcmp(choice, "SelectExisting"))
{
	BoundingBoxUGrid = this->GetUGridCheckedItem()->UGrid;	
};
}
void IaFeMesh::cb_CreateIrregularCylinderBoundingBoxSelectButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIrregularCylinderBoundingBoxSelectButton_i(o,v);
}

void IaFeMesh::cb_CreateIrregularCylinderSurfaceNoneSelectMenuItem_i(Fl_Menu_*, void*) {
  strcpy(choice ,"");
}
void IaFeMesh::cb_CreateIrregularCylinderSurfaceNoneSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIrregularCylinderSurfaceNoneSelectMenuItem_i(o,v);
}

void IaFeMesh::cb_CreateIrregularCylinderSurfaceSelectMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
CreateIrregularCylindricalMeshGroup->show();
SurfaceGroup->show();
strcpy(choice ,"Surface");
}
void IaFeMesh::cb_CreateIrregularCylinderSurfaceSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIrregularCylinderSurfaceSelectMenuItem_i(o,v);
}

Fl_Menu_Item IaFeMesh::menu_CreateIrregularCylinderGoupSurfaceInput[] = {
 {"None", 0,  (Fl_Callback*)IaFeMesh::cb_CreateIrregularCylinderSurfaceNoneSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Surface", 0,  (Fl_Callback*)IaFeMesh::cb_CreateIrregularCylinderSurfaceSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* IaFeMesh::CreateIrregularCylinderSurfaceNoneSelectMenuItem = IaFeMesh::menu_CreateIrregularCylinderGoupSurfaceInput + 0;
Fl_Menu_Item* IaFeMesh::CreateIrregularCylinderSurfaceSelectMenuItem = IaFeMesh::menu_CreateIrregularCylinderGoupSurfaceInput + 1;

void IaFeMesh::cb_CreateIrregularCylinderSurfaceSelectButton_i(Fl_Button*, void*) {
  if(!strcmp(choice, "Surface"))
{
	CompleteSurface = GetSTLCheckedItem()->GetPolyData();
};
}
void IaFeMesh::cb_CreateIrregularCylinderSurfaceSelectButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIrregularCylinderSurfaceSelectButton_i(o,v);
}

void IaFeMesh::cb_CreateIntervertebralDiscMeshGroupCloseButton_i(Fl_Button*, void*) {
  CreateIntervertebralDiscMeshGroup->hide();
}
void IaFeMesh::cb_CreateIntervertebralDiscMeshGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIntervertebralDiscMeshGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_CreateIntervertebraDiscMeshLowVertebraSelectMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
CreateIntervertebralDiscMeshGroup->show();
UnstructuredMeshGroup->show();
strcpy(choice , "LowerVertebra");
}
void IaFeMesh::cb_CreateIntervertebraDiscMeshLowVertebraSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIntervertebraDiscMeshLowVertebraSelectMenuItem_i(o,v);
}

void IaFeMesh::cb_CreateIntervertebralDiscMeshUpperVertebraSelectMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
CreateIntervertebralDiscMeshGroup->show();
UnstructuredMeshGroup->show();
strcpy(choice ,"UpperVertebra");
}
void IaFeMesh::cb_CreateIntervertebralDiscMeshUpperVertebraSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIntervertebralDiscMeshUpperVertebraSelectMenuItem_i(o,v);
}

void IaFeMesh::cb_CreateIntervertebraDiscMeshBoundingBoxSelectMenuItem_i(Fl_Menu_*, void*) {
  HideAll();
CreateIntervertebralDiscMeshGroup->show();
UnstructuredMeshGroup->show();
strcpy(choice , "BoundingBox");
}
void IaFeMesh::cb_CreateIntervertebraDiscMeshBoundingBoxSelectMenuItem(Fl_Menu_* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIntervertebraDiscMeshBoundingBoxSelectMenuItem_i(o,v);
}

Fl_Menu_Item IaFeMesh::menu_CreateIntervertebralDiscMeshGroupInput[] = {
 {"None", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Lower Vertebra", 0,  (Fl_Callback*)IaFeMesh::cb_CreateIntervertebraDiscMeshLowVertebraSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Upper Vertebra", 0,  (Fl_Callback*)IaFeMesh::cb_CreateIntervertebralDiscMeshUpperVertebraSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Bounding Box", 0,  (Fl_Callback*)IaFeMesh::cb_CreateIntervertebraDiscMeshBoundingBoxSelectMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* IaFeMesh::CreateIntervertebralDiscMeshSelectNoneMenuItem = IaFeMesh::menu_CreateIntervertebralDiscMeshGroupInput + 0;
Fl_Menu_Item* IaFeMesh::CreateIntervertebraDiscMeshLowVertebraSelectMenuItem = IaFeMesh::menu_CreateIntervertebralDiscMeshGroupInput + 1;
Fl_Menu_Item* IaFeMesh::CreateIntervertebralDiscMeshUpperVertebraSelectMenuItem = IaFeMesh::menu_CreateIntervertebralDiscMeshGroupInput + 2;
Fl_Menu_Item* IaFeMesh::CreateIntervertebraDiscMeshBoundingBoxSelectMenuItem = IaFeMesh::menu_CreateIntervertebralDiscMeshGroupInput + 3;

void IaFeMesh::cb_CreateIntervertebralDiscMeshGroupSelectButton_i(Fl_Button*, void*) {
  if(!strcmp(choice, "BoundingBox"))
{
	BoundingBoxUGrid = GetUGridCheckedItem()->UGrid;
}

if(!strcmp(choice, "LowerVertebra"))
{
	UGrid = GetUGridCheckedItem()->UGrid;
}
if(!strcmp(choice, "UpperVertebra"))
{
	UGrid1 = GetUGridCheckedItem()->UGrid;
};
}
void IaFeMesh::cb_CreateIntervertebralDiscMeshGroupSelectButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIntervertebralDiscMeshGroupSelectButton_i(o,v);
}

void IaFeMesh::cb_CreateIntervertebralDiscMeshGroupMeshButton_i(Fl_Return_Button*, void*) {
  if(BoundingBoxUGrid && UGrid && UGrid1)
{
	vtkMimxGenerateIntervertebralDisc *getdisc = vtkMimxGenerateIntervertebralDisc::New();
	getdisc->SetLowerVertebralBody(UGrid);
	getdisc->SetUpperVertebralBody(UGrid1);
	getdisc->SetBoundingBox(BoundingBoxUGrid);
	getdisc->SetDivisionsAlongAxis((int)NumberOfDivisionsAlongThicknessValueInput->value());
	getdisc->SetInnerBulgeOffset(0.0);
	getdisc->SetOuterBulgeOffset(0.0);
	getdisc->Update();
	if(getdisc->GetOutput())
	{
	vtkUnstructuredGridWriter *writer = vtkUnstructuredGridWriter::New();
	writer->SetFileName("ugrid.vtk");
	writer->SetInput(getdisc->GetOutput());
	writer->Write();
	vtkUnstructuredGridWriter *writer1 = vtkUnstructuredGridWriter::New();
	writer1->SetFileName("bbox.vtk");
	writer1->SetInput(getdisc->GetDiscBoundingBox());
	writer1->Write();
	this->vtkUGridList.Add(new vtkMimxUGrid);
	this->UGridCheckBrowser->add("Disc Bounding Box");
	this->UGridCheckBrowser->redraw();

        UGridCheckBrowser->check_none();
        UGridCheckBrowser->set_checked(UGridCheckBrowser->nitems());
	
	this->GetUGridCheckedItem()->UGrid->DeepCopy(getdisc->GetDiscBoundingBox());
	this->GetUGridCheckedItem()->UGrid->Modified();	
	this->vtkUGridList.GetLastItem()->GetActor()->GetProperty()->SetRepresentationToWireframe();
        this->VTKRenderer->AddActor(this->vtkUGridList.GetLastItem()->GetActor());
	this->FitView();
        HideAll();
	UnstructuredMeshGroup->show();
	
	this->vtkUGridList.Add(new vtkMimxUGrid);
	this->UGridCheckBrowser->add("Intervertebral Disc");
	this->UGridCheckBrowser->redraw();

        UGridCheckBrowser->check_none();
        UGridCheckBrowser->set_checked(UGridCheckBrowser->nitems());
	
	this->GetUGridCheckedItem()->UGrid->DeepCopy(getdisc->GetOutput());
	this->GetUGridCheckedItem()->UGrid->Modified();	
//	this->vtkUGridList.GetLastItem()->GetActor()->GetProperty()->SetRepresentationToWireFrame();
        this->VTKRenderer->AddActor(this->vtkUGridList.GetLastItem()->GetActor());
	this->FitView();
        HideAll();
	UnstructuredMeshGroup->show();

	}
};
}
void IaFeMesh::cb_CreateIntervertebralDiscMeshGroupMeshButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_CreateIntervertebralDiscMeshGroupMeshButton_i(o,v);
}

void IaFeMesh::cb_ExtractWidgetRadiusInput_i(Fl_Value_Input*, void*) {
  unstructuredgridextractwidget->SetEnabled(0);
unstructuredgridextractwidget->SetHandleSize(double(ExtractWidgetRadiusInput->value()));

unstructuredgridextractwidget->SetEnabled(1);
}
void IaFeMesh::cb_ExtractWidgetRadiusInput(Fl_Value_Input* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_ExtractWidgetRadiusInput_i(o,v);
}

void IaFeMesh::cb_ExtractWidgetClearButton_i(Fl_Button*, void*) {
  unstructuredgridextractwidget->SetEnabled(0);
unstructuredgridextractwidget->GetPointIdList()->Initialize();
unstructuredgridextractwidget->DeleteHandles();
unstructuredgridextractwidget->SetEnabled(1);
}
void IaFeMesh::cb_ExtractWidgetClearButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_ExtractWidgetClearButton_i(o,v);
}

void IaFeMesh::cb_ExtractWidgetPropertyGroupCloseButton_i(Fl_Button*, void*) {
  ExtractWidgetPropertyGroup->hide();
}
void IaFeMesh::cb_ExtractWidgetPropertyGroupCloseButton(Fl_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_ExtractWidgetPropertyGroupCloseButton_i(o,v);
}

void IaFeMesh::cb_ExtractWidgetPropertyGroupDoneButton_i(Fl_Return_Button*, void*) {
  vtkPoints *points = vtkPoints::New();
	points->SetNumberOfPoints(4);

	// for the unstructured grid cell	
	for(int i=0; i < 4; i++){	
	points->SetPoint(i, unstructuredgridextractwidget->GetUGrid()->GetPoint(unstructuredgridextractwidget->GetPointIdList()->GetId(i)));
	}
	vtkMimxUnstructuredGridFromFourPoints* gridfromfourpoints = vtkMimxUnstructuredGridFromFourPoints::New();
	gridfromfourpoints->SetPoints(points);
	gridfromfourpoints->SetExtrusionLength(5.0);
	gridfromfourpoints->Update();
	
	this->vtkUGridList.Add(new vtkMimxUGrid);
	this->UGridCheckBrowser->add("UGridFromFourPoints");
	this->UGridCheckBrowser->redraw();

	this->vtkUGridList.GetLastItem()->UGrid->DeepCopy(gridfromfourpoints->GetOutput());
	this->vtkUGridList.GetLastItem()->UGrid->Modified();	
        this->VTKRenderer->AddActor(this->vtkUGridList.GetLastItem()->GetActor());
        
        // for structured surface mesh
        
 /*       vtkGeometryFilter *geofil = vtkGeometryFilter::New();
	geofil->SetInput(unstructuredgridextractwidget->GetUGrid());
	vtkMimxFourPointsToStructuredPlanarMesh *con = vtkMimxFourPointsToStructuredPlanarMesh::New();
	con->SetInput(geofil->GetOutput());
	vtkIdList *idlist = vtkIdList::New();
	idlist->SetNumberOfIds(4);
	for(int i=0; i < 4; i++){	
	idlist->SetId(i, unstructuredgridextractwidget->GetPointIdList()->GetId(i));
	}
	con->SetPointList(idlist);
	con->Update();
        
        this->vtkPlanarStructuredGridList.Add(vtkMimxPlanarStructuredGridSource::New());
	this->StructuredPlanarMeshCheckBrowser->add("MeshFrom4Points");
	this->StructuredPlanarMeshCheckBrowser->redraw();

        StructuredPlanarMeshCheckBrowser->check_none();
        StructuredPlanarMeshCheckBrowser->set_checked(StructuredPlanarMeshCheckBrowser->nitems());
	
	this->GetPlanarStructuredGridCheckedItem()->SGrid->DeepCopy(con->GetOutput());
	this->GetPlanarStructuredGridCheckedItem()->SGrid->Modified();	
        this->VTKRenderer->AddActor(this->vtkPlanarStructuredGridList.GetLastItem()->Actor);
	this->FitView();*/
	this->FitView();
	points->Delete();
	gridfromfourpoints->Delete();
//	idlist->Delete();
//	con->Delete();
}
void IaFeMesh::cb_ExtractWidgetPropertyGroupDoneButton(Fl_Return_Button* o, void* v) {
  ((IaFeMesh*)(o->parent()->parent()->user_data()))->cb_ExtractWidgetPropertyGroupDoneButton_i(o,v);
}

IaFeMesh::IaFeMesh() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = MainWindow = new Fl_Double_Window(1024, 714, "IA FE MESH");
    w = o;
    o->user_data((void*)(this));
    { Fl_Tabs* o = MainWindowTabs = new Fl_Tabs(3, 90, 372, 665);
      o->tooltip("Work Bench");
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Group* o = ImageGroup = new Fl_Group(15, 120, 345, 600, "Image");
        o->labeltype(FL_ENGRAVED_LABEL);
        o->hide();
        { Fl_Group* o = ClipImageFromBoxGroup = new Fl_Group(33, 426, 320, 120);
          o->box(FL_UP_BOX);
          { Fl_Light_Button* o = ClipImageBoxLightButton = new Fl_Light_Button(80, 451, 50, 25, "Box");
            o->callback((Fl_Callback*)cb_ClipImageBoxLightButton);
          }
          { Fl_Light_Button* o = ClipImageImagePlaneLightButton = new Fl_Light_Button(58, 485, 100, 25, "Image Plane");
            o->callback((Fl_Callback*)cb_ClipImageImagePlaneLightButton);
          }
          { Fl_Return_Button* o = ClipImageClipReturnButton = new Fl_Return_Button(238, 470, 80, 25, "Clip");
            o->callback((Fl_Callback*)cb_ClipImageClipReturnButton);
          }
          { Fl_Button* o = ClipImageGroupCloseButton = new Fl_Button(334, 426, 18, 20, "X");
            o->callback((Fl_Callback*)cb_ClipImageGroupCloseButton);
          }
          o->end();
        }
        { Fl_Check_Browser* o = ImageCheckBrowser = new Fl_Check_Browser(23, 135, 320, 105);
          o->tooltip("Triangulated Surface");
          o->color(FL_BACKGROUND_COLOR);
          o->callback((Fl_Callback*)cb_ImageCheckBrowser);
          o->when(FL_WHEN_RELEASE);
          Fl_Group::current()->resizable(o);
        }
        o->end();
      }
      { Fl_Group* o = SurfaceGroup = new Fl_Group(10, 120, 361, 630, "Surf");
        o->labeltype(FL_ENGRAVED_LABEL);
        o->hide();
        { Fl_Group* o = STLCheckBrowserGroup = new Fl_Group(10, 125, 340, 160);
          o->tooltip("Triangulated Surface");
          { Fl_Check_Browser* o = STLCheckBrowser = new Fl_Check_Browser(23, 135, 320, 110);
            o->tooltip("Triangulated Surface");
            o->color(FL_BACKGROUND_COLOR);
            o->callback((Fl_Callback*)cb_STLCheckBrowser);
            o->when(FL_WHEN_RELEASE);
            Fl_Group::current()->resizable(o);
          }
          o->end();
        }
        { Fl_Group* o = SurfaceDistanceMapGroup = new Fl_Group(29, 420, 325, 170);
          o->box(FL_UP_BOX);
          o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
          o->hide();
          DistanceMapTextoutput = new Fl_Output(258, 425, 0, 25, "Distance Map (Closest Point)");
          { Fl_Group* o = SurfaceSourceTargetGroup = new Fl_Group(29, 474, 96, 50, "Surface");
            { Fl_Round_Button* o = SurfaceSourceRoundButton = new Fl_Round_Button(55, 474, 20, 30, "Source");
              o->tooltip("Surface on which Distance map is drawn");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_SurfaceSourceRoundButton);
            }
            { Fl_Round_Button* o = SurfaceTargetButton = new Fl_Round_Button(55, 503, 15, 21, "Target");
              o->tooltip("Surface to which distance is calculated");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_SurfaceTargetButton);
            }
            o->end();
          }
          { Fl_Group* o = SurfaceDistanceMapType = new Fl_Group(134, 474, 96, 60, "Gray/Color");
            { Fl_Round_Button* o = SurfaceGrayScaleRoundButton = new Fl_Round_Button(137, 502, 88, 25, "Gray Scale");
              o->tooltip("Gray Scale Color Map");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
            }
            { Fl_Round_Button* o = SurfaceRGBScaleRoundButton = new Fl_Round_Button(136, 479, 89, 25, "RGB Scale");
              o->tooltip("RGB (Rainbow) Color Map");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
            }
            o->end();
          }
          { Fl_Button* o = SurfaceDistanceMapComputeButton = new Fl_Button(270, 479, 70, 25, "Compute");
            o->tooltip("Compute the Distance Map");
            o->callback((Fl_Callback*)cb_SurfaceDistanceMapComputeButton);
          }
          { Fl_Button* o = SurfaceDistanceMapGroupCloseButton = new Fl_Button(341, 420, 13, 20, "X");
            o->tooltip("Close");
            o->labeltype(FL_EMBOSSED_LABEL);
            o->callback((Fl_Callback*)cb_SurfaceDistanceMapGroupCloseButton);
          }
          { Fl_Group* o = SpecifyDistanceMapMinMaxGroup = new Fl_Group(51, 545, 303, 45);
            { Fl_Check_Button* o = SpecifyMaxDistValueCheckButton = new Fl_Check_Button(174, 555, 22, 25, "Specify Max Value");
              o->down_box(FL_DOWN_BOX);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_Value_Input* o = DistanceMapMaxValue = new Fl_Value_Input(296, 555, 35, 25, "Max value :");
              o->value(1);
            }
            o->end();
          }
          ScalarBarActor = vtkScalarBarActor::New();
          o->end();
        }
        { Fl_Group* o = ExtrudeSurfaceGroup = new Fl_Group(56, 449, 220, 166);
          o->box(FL_UP_BOX);
          o->hide();
          { Fl_Button* o = ExtrudeSurfaceGroupCloseButton = new Fl_Button(226, 449, 50, 20, "X");
            o->callback((Fl_Callback*)cb_ExtrudeSurfaceGroupCloseButton);
          }
          { Fl_Value_Input* o = ExtrudeSurfaceExtrusionLengthInput = new Fl_Value_Input(94, 486, 55, 24, "Set Extrusion Length");
            o->value(1);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Round_Button* o = ExtrudeSurfaceSetNormalDirection = new Fl_Round_Button(90, 534, 64, 15, "Flip Extrusion Direction");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
          }
          { Fl_Return_Button* o = ExtrudeSurfaceDoneButton = new Fl_Return_Button(195, 581, 66, 20, "Done");
            o->callback((Fl_Callback*)cb_ExtrudeSurfaceDoneButton);
          }
          o->end();
        }
        { Fl_Group* o = PatchSurfaceGroup = new Fl_Group(95, 440, 190, 80, "Patch Surface");
          o->box(FL_UP_BOX);
          o->hide();
          { Fl_Button* o = PatchSurfaceGroupCloseButton = new Fl_Button(265, 440, 20, 20, "X");
            o->callback((Fl_Callback*)cb_PatchSurfaceGroupCloseButton);
          }
          { Fl_Return_Button* o = PatchSurfaceGroupPatchReturnButton = new Fl_Return_Button(149, 472, 76, 23, "Patch");
            o->callback((Fl_Callback*)cb_PatchSurfaceGroupPatchReturnButton);
          }
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = CurveGroup = new Fl_Group(10, 120, 360, 630, "Curve");
        o->labeltype(FL_ENGRAVED_LABEL);
        o->hide();
        { Fl_Check_Browser* o = CurveCheckBrowser = new Fl_Check_Browser(23, 135, 320, 105);
          o->tooltip("Curve");
          o->color(FL_BACKGROUND_COLOR);
          o->callback((Fl_Callback*)cb_CurveCheckBrowser);
          o->when(FL_WHEN_RELEASE);
          Fl_Group::current()->resizable(o);
        }
        { Fl_Group* o = CreateCurveGroup = new Fl_Group(40, 489, 300, 110);
          o->box(FL_UP_BOX);
          o->hide();
          LineCurveLabelTextInput = new Fl_Input(165, 499, 95, 25, "Line/Curve Label");
          { Fl_Group* o = CurvePickStartEndGroup = new Fl_Group(148, 530, 157, 65, "Pick :");
            o->align(FL_ALIGN_LEFT);
            { Fl_Round_Button* o = CurvePickStartRadioButton = new Fl_Round_Button(155, 537, 25, 25, "Start");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_CurvePickStartRadioButton);
            }
            { Fl_Round_Button* o = CurvePickEndRadioButton = new Fl_Round_Button(155, 565, 25, 25, "End");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_CurvePickEndRadioButton);
            }
            { Fl_Round_Button* o = ContinueCreateTraceRoundButton = new Fl_Round_Button(227, 549, 78, 20, "Continue");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_ContinueCreateTraceRoundButton);
            }
            o->end();
          }
          { Fl_Button* o = CreateCurveGroupCloseButton = new Fl_Button(325, 493, 13, 20, "X");
            o->tooltip("Close");
            o->labeltype(FL_EMBOSSED_LABEL);
            o->callback((Fl_Callback*)cb_CreateCurveGroupCloseButton);
          }
          o->end();
        }
        { Fl_Group* o = PlanarTransInterpGroup = new Fl_Group(20, 446, 300, 164);
          o->box(FL_UP_BOX);
          o->align(FL_ALIGN_TOP_LEFT);
          o->hide();
          { Fl_Group* o = PlanarTransInterpTransGroup = new Fl_Group(105, 457, 59, 94, "Select Curve");
            o->box(FL_UP_BOX);
            o->align(FL_ALIGN_LEFT);
            { Fl_Round_Button* o = PlanarMeshTransInterpCurveSelectRadioButton1 = new Fl_Round_Button(119, 459, 25, 25, " 1");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_PlanarMeshTransInterpCurveSelectRadioButton1);
            }
            { Fl_Round_Button* o = PlanarMeshTransInterpCurveSelectRadioButton2 = new Fl_Round_Button(119, 482, 25, 25, " 2");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_PlanarMeshTransInterpCurveSelectRadioButton2);
            }
            { Fl_Round_Button* o = PlanarMeshTransInterpCurveSelectRadioButton3 = new Fl_Round_Button(120, 505, 25, 25, " 3");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_PlanarMeshTransInterpCurveSelectRadioButton3);
            }
            { Fl_Round_Button* o = PlanarMeshTransInterpCurveSelectRadioButton4 = new Fl_Round_Button(120, 526, 25, 25, " 4");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_PlanarMeshTransInterpCurveSelectRadioButton4);
            }
            o->end();
          }
          { Fl_Return_Button* o = PlanarMeshTransInterpDoneButton = new Fl_Return_Button(180, 490, 75, 25, "Done");
            o->callback((Fl_Callback*)cb_PlanarMeshTransInterpDoneButton);
          }
          { Fl_Button* o = PlanarMeshTransInterpCreateGroupCloseButton = new Fl_Button(305, 452, 13, 25, "X");
            o->tooltip("Close");
            o->labeltype(FL_EMBOSSED_LABEL);
            o->callback((Fl_Callback*)cb_PlanarMeshTransInterpCreateGroupCloseButton);
          }
          { Fl_Value_Input* o = PlanarStructuredMeshMeshSeedButtonI = new Fl_Value_Input(150, 571, 25, 25, "Mesh Seed :     I    ");
            o->value(1);
          }
          { Fl_Value_Input* o = PlanarStructuredMeshMeshSeedButtonJ = new Fl_Value_Input(232, 570, 25, 25, "J :  ");
            o->value(1);
          }
          o->end();
        }
        { Fl_Group* o = EdgeSolidTransInterpGroup = new Fl_Group(23, 436, 335, 200);
          o->box(FL_UP_BOX);
          o->hide();
          { Fl_Group* o = EdgeToSolidMeshCurveSelectButtonGroup = new Fl_Group(25, 481, 326, 70);
            { Fl_Round_Button* o = CruveSolidTransInterpCurve1RadioButton = new Fl_Round_Button(26, 485, 25, 25, "Curve 1");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_CruveSolidTransInterpCurve1RadioButton);
            }
            { Fl_Round_Button* o = CruveSolidTransInterpCurve2RadioButton = new Fl_Round_Button(105, 485, 25, 25, "Curve 2");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_CruveSolidTransInterpCurve2RadioButton);
            }
            { Fl_Round_Button* o = CruveSolidTransInterpCurve3RadioButton = new Fl_Round_Button(196, 486, 25, 25, "Curve 3");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_CruveSolidTransInterpCurve3RadioButton);
            }
            { Fl_Round_Button* o = CruveSolidTransInterpCurve4RadioButton = new Fl_Round_Button(276, 485, 25, 25, "Curve 4");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_CruveSolidTransInterpCurve4RadioButton);
            }
            { Fl_Round_Button* o = CruveSolidTransInterpCurve5RadioButton = new Fl_Round_Button(26, 505, 25, 25, "Curve 5");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_CruveSolidTransInterpCurve5RadioButton);
            }
            { Fl_Round_Button* o = CruveSolidTransInterpCurve6RadioButton = new Fl_Round_Button(105, 505, 25, 25, "Curve 6");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_CruveSolidTransInterpCurve6RadioButton);
            }
            { Fl_Round_Button* o = CruveSolidTransInterpCurve7RadioButton = new Fl_Round_Button(196, 506, 25, 25, "Curve 7");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_CruveSolidTransInterpCurve7RadioButton);
            }
            { Fl_Round_Button* o = CruveSolidTransInterpCurve8RadioButton = new Fl_Round_Button(276, 505, 25, 25, "Curve 8");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_CruveSolidTransInterpCurve8RadioButton);
            }
            { Fl_Round_Button* o = CruveSolidTransInterpCurve9RadioButton = new Fl_Round_Button(25, 524, 25, 25, "Curve 9");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_CruveSolidTransInterpCurve9RadioButton);
            }
            { Fl_Round_Button* o = CruveSolidTransInterpCurve10RadioButton = new Fl_Round_Button(104, 524, 25, 25, "Curve 10");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_CruveSolidTransInterpCurve10RadioButton);
            }
            { Fl_Round_Button* o = CruveSolidTransInterpCurve11RadioButton = new Fl_Round_Button(195, 525, 25, 25, "Curve 11");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_CruveSolidTransInterpCurve11RadioButton);
            }
            { Fl_Round_Button* o = CruveSolidTransInterpCurve12RadioButton = new Fl_Round_Button(275, 524, 25, 25, "Curve 12");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->callback((Fl_Callback*)cb_CruveSolidTransInterpCurve12RadioButton);
            }
            o->end();
          }
          { Fl_Group* o = EdgeSolidMeshPlaneSelectGroup = new Fl_Group(43, 444, 285, 40);
            { Fl_Round_Button* o = EdgeToSolidPlaneSelectIJRadioButton = new Fl_Round_Button(93, 449, 20, 25, "Plane : IJ");
              o->down_box(FL_ROUND_DOWN_BOX);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_Round_Button* o = EdgeToSolidPlaneSelectJKRadioButton = new Fl_Round_Button(147, 449, 20, 25, "JK");
              o->down_box(FL_ROUND_DOWN_BOX);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_Round_Button* o = EdgeToSolidPlaneSelectKIRadioButton = new Fl_Round_Button(195, 449, 20, 25, "KI");
              o->down_box(FL_ROUND_DOWN_BOX);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_Round_Button* o = EdgeToSolidPlaneSelectNoneRadioButton = new Fl_Round_Button(281, 449, 20, 25, "None");
              o->down_box(FL_ROUND_DOWN_BOX);
              o->align(FL_ALIGN_LEFT);
            }
            o->end();
          }
          { Fl_Return_Button* o = EdgeToSolidMeshDoneButton = new Fl_Return_Button(273, 606, 65, 25, "Done");
            o->callback((Fl_Callback*)cb_EdgeToSolidMeshDoneButton);
          }
          { Fl_Button* o = EdgeToSolidMeshCreateGroupCloseButtonhTransInterpCreateGroupCloseButton = new Fl_Button(344, 436, 13, 25, "X");
            o->tooltip("Close");
            o->labeltype(FL_EMBOSSED_LABEL);
            o->callback((Fl_Callback*)cb_EdgeToSolidMeshCreateGroupCloseButtonhTransInterpCreateGroupCloseButton);
          }
          { Fl_Value_Input* o = CurveToSolidMeshSeedI = new Fl_Value_Input(129, 551, 38, 25, "Mesh Seed :   I:");
            o->value(1);
          }
          { Fl_Value_Input* o = CurveToSolidMeshSeedJ = new Fl_Value_Input(204, 551, 38, 25, "J: ");
            o->value(1);
          }
          { Fl_Value_Input* o = CurveToSolidMeshSeedK = new Fl_Value_Input(283, 551, 38, 25, "K:  ");
            o->value(1);
          }
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = StructuredPlanarMeshGroup = new Fl_Group(5, 125, 365, 625, "Plane Mesh");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->hide();
        { Fl_Group* o = StructuredPlanarMeshBrowserGroup = new Fl_Group(15, 135, 355, 615);
          { Fl_Check_Browser* o = StructuredPlanarMeshCheckBrowser = new Fl_Check_Browser(23, 135, 320, 105);
            o->color(FL_DARK1);
          }
          o->end();
        }
        { Fl_Group* o = CreateStructuredPlanarMeshGroup = new Fl_Group(39, 345, 270, 110);
          o->box(FL_UP_BOX);
          o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
          o->hide();
          new Fl_Value_Input(206, 370, 25, 25, "Number of Input curves");
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = StructuredSolidMeshGroup = new Fl_Group(3, 115, 368, 640, "Solid Mesh");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->hide();
        { Fl_Group* o = SolidMeshCheckBrowserGroup = new Fl_Group(10, 135, 351, 115);
          o->tooltip("Triangulated Surface");
          { Fl_Check_Browser* o = StructuredSolidMeshCheckBrowser = new Fl_Check_Browser(23, 135, 320, 105);
            o->tooltip("Triangulated Surface");
            o->color(FL_BACKGROUND_COLOR);
            Fl_Group::current()->resizable(o);
          }
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = UnstructuredMeshGroup = new Fl_Group(5, 115, 370, 640, "Unstruct Mesh");
        o->labeltype(FL_ENGRAVED_LABEL);
        { Fl_Check_Browser* o = UGridCheckBrowser = new Fl_Check_Browser(23, 135, 320, 105);
          o->tooltip("Triangulated Surface");
          o->type(2);
          o->color(FL_BACKGROUND_COLOR);
          o->callback((Fl_Callback*)cb_UGridCheckBrowser);
          o->when(FL_WHEN_RELEASE);
          Fl_Group::current()->resizable(o);
        }
        { Fl_Group* o = EditBBMeshSeedGroup = new Fl_Group(27, 495, 315, 112);
          o->box(FL_UP_BOX);
          o->hide();
          { Fl_Button* o = EditBBMeshSeedCloseButton = new Fl_Button(322, 495, 20, 20, "X");
            o->callback((Fl_Callback*)cb_EditBBMeshSeedCloseButton);
          }
          { Fl_Value_Input* o = EditBBMeshSeedAverageElementLengthInputButton = new Fl_Value_Input(213, 520, 44, 25, "Average Element Length : ");
            o->maximum(100);
            o->value(2);
          }
          { Fl_Return_Button* o = EditBBMeshSeedComputeButton = new Fl_Return_Button(232, 572, 100, 25, "Compute");
            o->callback((Fl_Callback*)cb_EditBBMeshSeedComputeButton);
          }
          o->end();
        }
        { Fl_Group* o = EditBBMergeNodesGroup = new Fl_Group(27, 496, 234, 78);
          o->box(FL_UP_BOX);
          o->hide();
          { Fl_Value_Input* o = EditBBMergeNodesToleranceInput = new Fl_Value_Input(116, 526, 39, 25, "Tolerance : ");
            o->maximum(100);
          }
          { Fl_Return_Button* o = EditBBMergeNodesMergeButton = new Fl_Return_Button(182, 527, 75, 25, "Merge");
            o->callback((Fl_Callback*)cb_EditBBMergeNodesMergeButton);
          }
          { Fl_Button* o = EditBBMergeNodesGroupCloseButton = new Fl_Button(242, 498, 17, 16, "X");
            o->callback((Fl_Callback*)cb_EditBBMergeNodesGroupCloseButton);
          }
          o->end();
        }
        { Fl_Group* o = EditBBMirrorGroup = new Fl_Group(47, 493, 230, 93);
          o->box(FL_UP_BOX);
          o->hide();
          { Fl_Group* o = EditBBMirrorSelectAxisGroup = new Fl_Group(57, 506, 60, 60);
            o->box(FL_UP_BOX);
            { Fl_Round_Button* o = EditBBMirrorXAxisButton = new Fl_Round_Button(77, 506, 20, 24, "X");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->value(1);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_Round_Button* o = EditBBMirrorYAxisButton = new Fl_Round_Button(78, 528, 20, 20, "Y");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_Round_Button* o = EditBBMirrorZAxisButton = new Fl_Round_Button(77, 546, 20, 20, "Z");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->align(FL_ALIGN_LEFT);
            }
            o->end();
          }
          { Fl_Group* o = EditBBMirrorPosNegSelectGroup = new Fl_Group(137, 512, 45, 50);
            o->box(FL_UP_BOX);
            { Fl_Round_Button* o = EditBBPosRadioButton = new Fl_Round_Button(149, 516, 20, 20, "+");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->value(1);
            }
            { Fl_Round_Button* o = EditBBNegRadioButton = new Fl_Round_Button(150, 535, 25, 25, "-");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
            }
            o->end();
          }
          { Fl_Return_Button* o = EditBBMirrorButton = new Fl_Return_Button(199, 551, 73, 25, "Mirror");
            o->callback((Fl_Callback*)cb_EditBBMirrorButton);
          }
          { Fl_Button* o = EditBBMirrorGroupCloseButton = new Fl_Button(252, 496, 20, 20, "X");
            o->callback((Fl_Callback*)cb_EditBBMirrorGroupCloseButton);
          }
          o->end();
        }
        { Fl_Group* o = ChangeMeshSeedGroup = new Fl_Group(100, 460, 180, 110, "Change Mesh Seed");
          o->box(FL_UP_BOX);
          o->hide();
          { Fl_Button* o = ChangeMeshSeedGroupCloseButton = new Fl_Button(260, 460, 20, 20, "X");
            o->callback((Fl_Callback*)cb_ChangeMeshSeedGroupCloseButton);
          }
          { Fl_Group* o = ChangeMeshSeedChoiceRadioButton = new Fl_Group(119, 486, 46, 46);
            { Fl_Round_Button* o = ChangeMeshSeedXAxisButton = new Fl_Round_Button(119, 489, 36, 15, "  X");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
            }
            { Fl_Round_Button* o = ChangeMeshSeedYAxisButton = new Fl_Round_Button(119, 503, 46, 15, "  Y");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
            }
            { Fl_Round_Button* o = ChangeMeshSeedZAxisButton = new Fl_Round_Button(119, 517, 46, 15, "  Z");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
            }
            o->end();
          }
          { Fl_Return_Button* o = ChangeMeshSeedComputeButton = new Fl_Return_Button(190, 530, 84, 25, "Change");
            o->callback((Fl_Callback*)cb_ChangeMeshSeedComputeButton);
          }
          { Fl_Value_Input* o = ChangeMeshSeedValueInput = new Fl_Value_Input(247, 497, 28, 24, "Mesh Seed");
            o->value(1);
          }
          o->end();
        }
        { Fl_Group* o = CreateIntervertebralDiscElementSetsGroup = new Fl_Group(35, 460, 306, 150);
          o->box(FL_UP_BOX);
          o->hide();
          { Fl_Button* o = CreateIntervertebralDiscElementSetsGroupCloseButton = new Fl_Button(321, 460, 19, 20, "X");
            o->callback((Fl_Callback*)cb_CreateIntervertebralDiscElementSetsGroupCloseButton);
          }
          { Fl_Choice* o = CreateIntervertebralDiscElementSetsGroupInput = new Fl_Choice(100, 491, 115, 25, "Input : ");
            o->down_box(FL_BORDER_BOX);
            o->menu(menu_CreateIntervertebralDiscElementSetsGroupInput);
          }
          { Fl_Button* o = CreateIntervertebralDiscElementSetsGroupSelectButton = new Fl_Button(234, 494, 64, 20, "Select");
            o->callback((Fl_Callback*)cb_CreateIntervertebralDiscElementSetsGroupSelectButton);
          }
          { Fl_Return_Button* o = CreateIntervertebralDiscElementSetsGroupCreateButton = new Fl_Return_Button(250, 572, 75, 23, "Create");
            o->callback((Fl_Callback*)cb_CreateIntervertebralDiscElementSetsGroupCreateButton);
          }
          CreateIntervertebralElementSetsNameInput = new Fl_Input(194, 531, 100, 24, "Element Sets Name");
          o->end();
        }
        o->end();
      }
      o->end();
      Fl_Group::current()->resizable(o);
    }
    { Fl_Menu_Bar* o = CommonMenuBar = new Fl_Menu_Bar(1, 11, 330, 30);
      { Fl_Menu_Item* o = &menu_CommonMenuBar[31];
        editunstructuredhexahedrongrid = vtkMimxEditUnstructuredHexahedronGrid::New(); unstructuredgridwidget = vtkMimxUnstructuredGridWidget::New();unstructuredgridactor = vtkActor::New();
        boundingbox = vtkMimxBoundingBoxSource::New();
      }
      { Fl_Menu_Item* o = &menu_CommonMenuBar[35];
        //#include "vtkBoundingBoxToitkStructuredSolidMesh.h"
        //#include "itkStructuredPlanarMeshStrucutredSolidMesh.h"
        //#include "itkHexMeshTovtkPolyData.h"
      }
      { Fl_Menu_Item* o = &menu_CommonMenuBar[36];
        StructuredHexahedronMesh = vtkMimxGenerateHexahedronMesh::New();
      }
      { Fl_Menu_Item* o = &menu_CommonMenuBar[59];
        unstructuredgridextractwidget = vtkMimxUnstructuredGridExtractWidget::New();
      }
      { Fl_Menu_Item* o = &menu_CommonMenuBar[66];
        this->LocalAxesActor = NULL;
      }
      { Fl_Menu_Item* o = &menu_CommonMenuBar[93];
        MeshQuality = NULL;
      }
      o->menu(menu_CommonMenuBar);
    }
    { Fl_Menu_Bar* o = SurfaceMenuBar = new Fl_Menu_Bar(334, 10, 390, 30);
      o->menu(menu_SurfaceMenuBar);
    }
    { vtkFlRenderWindowInteractor* o = VTKFlWindow = new vtkFlRenderWindowInteractor(383, 79, 614, 620);
      o->box(FL_BORDER_FRAME);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
      VTKRenderer = vtkRenderer::New(); VTKRenderWindow = vtkRenderWindow::New(); AxisRenderer = vtkRenderer::New();
    }
    { Fl_Menu_Bar* o = InteractionModeMenuBar = new Fl_Menu_Bar(730, 7, 220, 35);
 {Fl_Menu_Item* o = &menu_InteractionModeMenuBar[0];
      o->image(image_rotate);
      }
 {Fl_Menu_Item* o = &menu_InteractionModeMenuBar[1];
      o->image(image_pan);
      }
 {Fl_Menu_Item* o = &menu_InteractionModeMenuBar[2];
      o->image(image_zoom);
      }
 {Fl_Menu_Item* o = &menu_InteractionModeMenuBar[3];
      o->image(image_trace);
      }
      { Fl_Menu_Item* o = &menu_InteractionModeMenuBar[4];
        //boundingbox = vtkMimxBoundingBoxSource::New();
        unstructuredgridwidget = vtkMimxUnstructuredGridWidget::New();
      }
      o->menu(menu_InteractionModeMenuBar);
      InteractorStyleSelect = vtkInteractorStyleSelect::New();PVAxesActor = vtkPVAxesActor::New(); CallBackCommand = vtkCallbackCommand::New();
    }
    { Fl_Button* o = DoneButton = new Fl_Button(915, 50, 40, 25, "Done");
      o->callback((Fl_Callback*)cb_DoneButton);
    }
    { Fl_Group* o = TransformGroup = new Fl_Group(10, 478, 355, 190, "Transform");
      o->box(FL_UP_BOX);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->hide();
      { Fl_Group* o = TransformTypeGroup = new Fl_Group(15, 537, 90, 91);
        { Fl_Round_Button* o = RotateTransformRadioButton = new Fl_Round_Button(20, 537, 25, 25, "Rotate");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
        }
        { Fl_Round_Button* o = ScaleTransformRadioButton = new Fl_Round_Button(21, 572, 25, 25, "Scale");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
        }
        { Fl_Round_Button* o = TranslateTransformRadioButton = new Fl_Round_Button(21, 603, 25, 25, "Translate");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
        }
        o->end();
      }
      { Fl_Choice* o = RotateTransformAxisChoice = new Fl_Choice(148, 537, 40, 24, "About");
        o->down_box(FL_BORDER_BOX);
        o->menu(menu_RotateTransformAxisChoice);
      }
      { Fl_Value_Input* o = new Fl_Value_Input(257, 536, 39, 25, "Angle : ");
        o->minimum(-360);
        o->maximum(360);
      }
      { Fl_Value_Input* o = TransformCenterX = new Fl_Value_Input(97, 499, 55, 25, "Center :  X  : ");
        o->minimum(-360);
        o->maximum(360);
      }
      { Fl_Value_Input* o = TransformCenterY = new Fl_Value_Input(189, 499, 57, 25, "Y  : ");
        o->minimum(-360);
        o->maximum(360);
      }
      { Fl_Value_Input* o = TransformCenterZ = new Fl_Value_Input(279, 499, 56, 25, "Z  : ");
        o->minimum(-360);
        o->maximum(360);
      }
      TransformScaleFactor = new Fl_Value_Input(144, 571, 57, 26, "Factor  : ");
      { Fl_Value_Input* o = TransformTranslateX = new Fl_Value_Input(142, 603, 45, 25, "X  : ");
        o->minimum(-360);
        o->maximum(360);
      }
      { Fl_Value_Input* o = TransformTranslateY = new Fl_Value_Input(226, 602, 41, 25, "Y  : ");
        o->minimum(-360);
        o->maximum(360);
      }
      { Fl_Value_Input* o = TransformTranslateZ = new Fl_Value_Input(296, 602, 46, 25, "Z  : ");
        o->minimum(-360);
        o->maximum(360);
      }
      { Fl_Button* o = TransformGroupCloseButton = new Fl_Button(340, 478, 25, 21, "X");
        o->callback((Fl_Callback*)cb_TransformGroupCloseButton);
      }
      { Fl_Return_Button* o = TransformDoneButton = new Fl_Return_Button(265, 638, 70, 25, "Done");
        o->callback((Fl_Callback*)cb_TransformDoneButton);
      }
      o->end();
    }
    { Fl_Group* o = GeometryPropertyGroup = new Fl_Group(5, 635, 360, 70);
      o->box(FL_UP_BOX);
      o->hide();
      GeometricCenterPropertyX = new Fl_Value_Output(138, 664, 65, 25, "Geometric Center : ");
      GeometricCenterPropertyZ = new Fl_Value_Output(295, 664, 65, 25);
      GeometricCenterPropertyY = new Fl_Value_Output(218, 664, 65, 25, " ");
      { Fl_Button* o = GeometryPropertyGroupCloseButton = new Fl_Button(345, 635, 20, 20, "X");
        o->callback((Fl_Callback*)cb_GeometryPropertyGroupCloseButton);
      }
      o->end();
    }
    { vtkFlRenderWindowInteractor* o = VTKFlWindowNormal = new vtkFlRenderWindowInteractor(393, 89, 600, 600);
      o->box(FL_BORDER_FRAME);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Group* o = BBWidgetPropertyGroup = new Fl_Group(792, 46, 95, 30);
      o->box(FL_UP_BOX);
      o->hide();
      { Fl_Value_Input* o = BBWidgetRadiusInput = new Fl_Value_Input(845, 50, 35, 23, "Radius");
        o->value(1);
        o->callback((Fl_Callback*)cb_BBWidgetRadiusInput);
      }
      o->end();
    }
    { Fl_Group* o = PickSurfacePropertyGroup = new Fl_Group(70, 540, 215, 105);
      o->box(FL_UP_BOX);
      o->hide();
      { Fl_Value_Input* o = PickSurfaceRadiusInput = new Fl_Value_Input(123, 544, 35, 23, "Radius");
        o->value(1);
        o->callback((Fl_Callback*)cb_PickSurfaceRadiusInput);
      }
      { Fl_Button* o = PickSurfaceClearButton = new Fl_Button(84, 609, 64, 25, "Clear");
        o->callback((Fl_Callback*)cb_PickSurfaceClearButton);
      }
      { Fl_Button* o = PickSurfacePropertyGroupCloseButton = new Fl_Button(253, 540, 20, 20, "X");
        o->callback((Fl_Callback*)cb_PickSurfacePropertyGroupCloseButton);
      }
      { Fl_Return_Button* o = PickSurfacePropertyGroupDoneButton = new Fl_Return_Button(204, 613, 66, 20, "Done");
        o->callback((Fl_Callback*)cb_PickSurfacePropertyGroupDoneButton);
      }
      { Fl_Button* o = SelectSurfaceStopPickingButton = new Fl_Button(76, 580, 95, 20, "Stop Picking");
        o->callback((Fl_Callback*)cb_SelectSurfaceStopPickingButton);
      }
      { Fl_Button* o = SelectSurfaceStartPickingButton = new Fl_Button(185, 580, 95, 20, "Start Picking");
        o->callback((Fl_Callback*)cb_SelectSurfaceStartPickingButton);
      }
      o->end();
    }
    { Fl_Group* o = MeshQualityGroup = new Fl_Group(75, 543, 185, 95, "Mesh Quality");
      o->box(FL_UP_BOX);
      o->hide();
      { Fl_Value_Input* o = MeshQualityShrinkFactor = new Fl_Value_Input(199, 590, 41, 24, "Shrink Factor : ");
        o->value(0.8);
        o->callback((Fl_Callback*)cb_MeshQualityShrinkFactor);
      }
      { Fl_Button* o = MeshQualityGroupCloseButton = new Fl_Button(239, 544, 20, 20, "X");
        o->callback((Fl_Callback*)cb_MeshQualityGroupCloseButton);
      }
      o->end();
    }
    { Fl_Group* o = MergeSolidMeshGroup = new Fl_Group(77, 580, 150, 100, "Merge Solid Meshes");
      o->box(FL_UP_BOX);
      o->hide();
      { Fl_Return_Button* o = MergeSolidMeshMergeButton = new Fl_Return_Button(141, 649, 80, 25, "Merge");
        o->callback((Fl_Callback*)cb_MergeSolidMeshMergeButton);
      }
      { Fl_Button* o = MergeSolidMeshGroupCloseButton = new Fl_Button(200, 583, 25, 20, "X");
        o->callback((Fl_Callback*)cb_MergeSolidMeshGroupCloseButton);
      }
      o->end();
    }
    { Fl_Group* o = AbaqusFormatPropertiesGroup = new Fl_Group(20, 487, 344, 191);
      o->box(FL_UP_BOX);
      o->hide();
      { Fl_Button* o = AbaqusFormatPropertiesGroupCloseButton = new Fl_Button(339, 487, 25, 20, "X");
        o->callback((Fl_Callback*)cb_AbaqusFormatPropertiesGroupCloseButton);
      }
      { Fl_Value_Input* o = AbaqusFormatPropertiesGroupStartingNodeNumberInput = new Fl_Value_Input(195, 605, 85, 24, "Starting Node Number");
        o->value(1);
      }
      { Fl_Value_Input* o = AbaqusFormatPropertiesGroupStartingElementNumberInput = new Fl_Value_Input(197, 642, 85, 24, "Starting Element  Number");
        o->value(1);
      }
      { Fl_Choice* o = ApplyNodesElementNumbersMeshInput = new Fl_Choice(104, 505, 115, 25, "Mesh  : ");
        o->down_box(FL_BORDER_BOX);
        o->menu(menu_ApplyNodesElementNumbersMeshInput);
      }
      { Fl_Button* o = ApplyNodesElementNumbersMeshSelectButton = new Fl_Button(243, 506, 64, 20, "Select");
        o->callback((Fl_Callback*)cb_ApplyNodesElementNumbersMeshSelectButton);
      }
      { Fl_Button* o = ApplyNodeElementNumberNodeNumberApplyButton = new Fl_Button(290, 607, 64, 20, "Apply");
        o->callback((Fl_Callback*)cb_ApplyNodeElementNumberNodeNumberApplyButton);
      }
      { Fl_Button* o = ApplyNodeElementNumberElementNumberApplyButton = new Fl_Button(292, 643, 64, 20, "Apply");
        o->callback((Fl_Callback*)cb_ApplyNodeElementNumberElementNumberApplyButton);
      }
      AbaqusFormatElementSetNameInput = new Fl_Input(192, 541, 125, 24, "Element Set Name");
      o->end();
    }
    { Fl_Group* o = DisplayGroup = new Fl_Group(31, 260, 315, 145);
      o->box(FL_UP_BOX);
      { Fl_Button* o = DisplayGroupShowButton = new Fl_Button(45, 270, 65, 25, "Show");
        o->callback((Fl_Callback*)cb_DisplayGroupShowButton);
      }
      { Fl_Button* o = DisplayGroupHideButton = new Fl_Button(125, 270, 65, 25, "Hide");
        o->callback((Fl_Callback*)cb_DisplayGroupHideButton);
      }
      { Fl_Button* o = DisplayGroupDeleteButton = new Fl_Button(275, 273, 64, 20, "Delete");
        o->callback((Fl_Callback*)cb_DisplayGroupDeleteButton);
      }
      o->end();
    }
    { Fl_Group* o = PosteriorElementMeshGroup = new Fl_Group(45, 412, 285, 308);
      o->box(FL_UP_BOX);
      o->hide();
      { Fl_Group* o = PosteriorElementSurfaceDefinitions = new Fl_Group(66, 450, 85, 48, "Surface Definitions");
        { Fl_Round_Button* o = PosteriorElementCompleteSurfaceRadioButton = new Fl_Round_Button(66, 460, 85, 15, "Complete");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_PosteriorElementCompleteSurfaceRadioButton);
        }
        { Fl_Round_Button* o = PosteriorElementCutSurfaceRadioButton = new Fl_Round_Button(66, 478, 64, 20, "Cut");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_PosteriorElementCutSurfaceRadioButton);
        }
        o->end();
      }
      { Fl_Group* o = PosteriorElementUnstructuredMeshGroup = new Fl_Group(207, 449, 118, 45, "Unstructured Mesh");
        { Fl_Round_Button* o = PosteriorElementBoundingBoxRadioButton = new Fl_Round_Button(211, 461, 64, 15, "Bounding Box");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_PosteriorElementBoundingBoxRadioButton);
        }
        { Fl_Round_Button* o = PosteriorElementVertebralBodyRadioButton = new Fl_Round_Button(212, 484, 64, 10, "Vertebral Body");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_PosteriorElementVertebralBodyRadioButton);
        }
        o->end();
      }
      { Fl_Return_Button* o = PosteriorElementMeshReturnButton = new Fl_Return_Button(141, 523, 79, 25, "Mesh");
        o->callback((Fl_Callback*)cb_PosteriorElementMeshReturnButton);
      }
      { Fl_Button* o = PosteriorElementMeshGroupCloseButton = new Fl_Button(305, 412, 25, 20, "X");
        o->callback((Fl_Callback*)cb_PosteriorElementMeshGroupCloseButton);
      }
      { Fl_Return_Button* o = PosteriorElementMeshSmoothReturnButton = new Fl_Return_Button(230, 572, 85, 25, "Smooth");
        o->callback((Fl_Callback*)cb_PosteriorElementMeshSmoothReturnButton);
      }
      { Fl_Value_Input* o = PosteriorElementMeshSmoothingNumberOfIterations = new Fl_Value_Input(155, 572, 45, 24, "Num of Iter :");
        o->value(1);
      }
      { Fl_Button* o = PosteriorElementRecalculateInteriorNodesButton = new Fl_Button(106, 627, 170, 25, "Recalculate Interior Nodes");
        o->callback((Fl_Callback*)cb_PosteriorElementRecalculateInteriorNodesButton);
      }
      o->end();
    }
    { Fl_Group* o = CreateMeshFromBoundingBoxGroup = new Fl_Group(75, 440, 284, 120, "Create Mesh");
      o->box(FL_UP_BOX);
      o->hide();
      { Fl_Button* o = CreateMeshFromBoundingBoxGoupCloseButton = new Fl_Button(339, 440, 19, 20, "X");
        o->callback((Fl_Callback*)cb_CreateMeshFromBoundingBoxGoupCloseButton);
      }
      { Fl_Choice* o = CreateMeshFromBoundingBoxGroupInput = new Fl_Choice(140, 465, 115, 25, "Input : ");
        o->down_box(FL_BORDER_BOX);
        o->menu(menu_CreateMeshFromBoundingBoxGroupInput);
      }
      { Fl_Button* o = CreateMeshFromBoundingBoxSelectButton = new Fl_Button(267, 468, 64, 20, "Select");
        o->callback((Fl_Callback*)cb_CreateMeshFromBoundingBoxSelectButton);
      }
      { Fl_Return_Button* o = CreateMeshFromBoundingBoxMeshButton = new Fl_Return_Button(159, 510, 70, 25, "Mesh");
        o->callback((Fl_Callback*)cb_CreateMeshFromBoundingBoxMeshButton);
      }
      o->end();
    }
    { Fl_Group* o = RecalculateInteriorNodesGroup = new Fl_Group(53, 460, 274, 110, "Recalculate Interior Nodes");
      o->box(FL_UP_BOX);
      o->hide();
      { Fl_Button* o = RecalculateInteriorNodesGoupCloseButton = new Fl_Button(307, 460, 19, 20, "X");
        o->callback((Fl_Callback*)cb_RecalculateInteriorNodesGoupCloseButton);
      }
      { Fl_Choice* o = RecalculateInteriorNodesGoupInput = new Fl_Choice(118, 485, 115, 25, "Input : ");
        o->down_box(FL_BORDER_BOX);
        o->menu(menu_RecalculateInteriorNodesGoupInput);
      }
      { Fl_Button* o = RecalculateInteriorNodesSelectButton = new Fl_Button(245, 488, 64, 20, "Select");
        o->callback((Fl_Callback*)cb_RecalculateInteriorNodesSelectButton);
      }
      { Fl_Return_Button* o = RecalculateInteriorNodesButton = new Fl_Return_Button(213, 530, 110, 25, "Recalculate");
        o->callback((Fl_Callback*)cb_RecalculateInteriorNodesButton);
      }
      o->end();
    }
    { Fl_Group* o = LaplacianSmoothingGroup = new Fl_Group(36, 454, 320, 120);
      o->box(FL_UP_BOX);
      o->hide();
      { Fl_Button* o = LaplacinaSmoothingGroupCloseButton = new Fl_Button(341, 454, 13, 20, "X");
        o->tooltip("Close");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->callback((Fl_Callback*)cb_LaplacinaSmoothingGroupCloseButton);
      }
      { Fl_Choice* o = LaplacianSmoothingGroupInput = new Fl_Choice(117, 483, 115, 25, "Input : ");
        o->down_box(FL_BORDER_BOX);
        o->menu(menu_LaplacianSmoothingGroupInput);
      }
      { Fl_Button* o = LaplacianSmoothingSelectButton = new Fl_Button(271, 485, 64, 20, "Select");
        o->callback((Fl_Callback*)cb_LaplacianSmoothingSelectButton);
      }
      { Fl_Return_Button* o = LaplacianSmoothingMeshButton = new Fl_Return_Button(131, 527, 86, 25, "Smooth");
        o->callback((Fl_Callback*)cb_LaplacianSmoothingMeshButton);
      }
      o->end();
    }
    { Fl_Group* o = CreateIrregularCylindricalMeshGroup = new Fl_Group(25, 469, 330, 170, "Irregular Cylinder");
      o->box(FL_UP_BOX);
      o->hide();
      { Fl_Return_Button* o = IrregularCylinderMeshButton = new Fl_Return_Button(277, 605, 70, 25, "Mesh");
        o->box(FL_BORDER_BOX);
        o->callback((Fl_Callback*)cb_IrregularCylinderMeshButton);
      }
      { Fl_Button* o = CreateIrregularCylinderMeshGroupCloseButton = new Fl_Button(330, 469, 25, 25, "X");
        o->callback((Fl_Callback*)cb_CreateIrregularCylinderMeshGroupCloseButton);
      }
      { Fl_Choice* o = CreateIrregularCylinderGoupTraceInput = new Fl_Choice(128, 495, 115, 25, "Trace : ");
        o->down_box(FL_BORDER_BOX);
        o->menu(menu_CreateIrregularCylinderGoupTraceInput);
      }
      { Fl_Button* o = CreateIrregularCylinderCurveSelectButton = new Fl_Button(255, 498, 64, 20, "Select");
        o->callback((Fl_Callback*)cb_CreateIrregularCylinderCurveSelectButton);
      }
      { Fl_Choice* o = CreateIrregularCylinderGoupBoundingBoxInput = new Fl_Choice(127, 569, 115, 25, "Bounding Box : ");
        o->down_box(FL_BORDER_BOX);
        o->menu(menu_CreateIrregularCylinderGoupBoundingBoxInput);
      }
      { Fl_Button* o = CreateIrregularCylinderBoundingBoxSelectButton = new Fl_Button(254, 572, 64, 20, "Select");
        o->callback((Fl_Callback*)cb_CreateIrregularCylinderBoundingBoxSelectButton);
      }
      { Fl_Choice* o = CreateIrregularCylinderGoupSurfaceInput = new Fl_Choice(127, 534, 115, 25, "Surface  : ");
        o->down_box(FL_BORDER_BOX);
        o->menu(menu_CreateIrregularCylinderGoupSurfaceInput);
      }
      { Fl_Button* o = CreateIrregularCylinderSurfaceSelectButton = new Fl_Button(254, 537, 64, 20, "Select");
        o->callback((Fl_Callback*)cb_CreateIrregularCylinderSurfaceSelectButton);
      }
      o->end();
    }
    { Fl_Group* o = CreateIntervertebralDiscMeshGroup = new Fl_Group(39, 455, 305, 130, "Create Intervertebral Disc");
      o->box(FL_UP_BOX);
      o->hide();
      { Fl_Button* o = CreateIntervertebralDiscMeshGroupCloseButton = new Fl_Button(314, 455, 30, 20, "X");
        o->callback((Fl_Callback*)cb_CreateIntervertebralDiscMeshGroupCloseButton);
      }
      { Fl_Choice* o = CreateIntervertebralDiscMeshGroupInput = new Fl_Choice(90, 481, 115, 25, "Input : ");
        o->down_box(FL_BORDER_BOX);
        o->menu(menu_CreateIntervertebralDiscMeshGroupInput);
      }
      { Fl_Button* o = CreateIntervertebralDiscMeshGroupSelectButton = new Fl_Button(224, 484, 64, 20, "Select");
        o->callback((Fl_Callback*)cb_CreateIntervertebralDiscMeshGroupSelectButton);
      }
      { Fl_Return_Button* o = CreateIntervertebralDiscMeshGroupMeshButton = new Fl_Return_Button(255, 555, 76, 25, "Mesh");
        o->callback((Fl_Callback*)cb_CreateIntervertebralDiscMeshGroupMeshButton);
      }
      { Fl_Value_Input* o = NumberOfDivisionsAlongThicknessValueInput = new Fl_Value_Input(270, 516, 29, 24, "Num of Div along thickness of Disc");
        o->value(1);
      }
      o->end();
    }
    { Fl_Group* o = ExtractWidgetPropertyGroup = new Fl_Group(85, 555, 205, 95);
      o->box(FL_UP_BOX);
      o->hide();
      { Fl_Value_Input* o = ExtractWidgetRadiusInput = new Fl_Value_Input(138, 559, 35, 23, "Radius");
        o->value(1);
        o->callback((Fl_Callback*)cb_ExtractWidgetRadiusInput);
      }
      { Fl_Button* o = ExtractWidgetClearButton = new Fl_Button(91, 620, 64, 25, "Clear");
        o->callback((Fl_Callback*)cb_ExtractWidgetClearButton);
      }
      { Fl_Button* o = ExtractWidgetPropertyGroupCloseButton = new Fl_Button(268, 555, 20, 20, "X");
        o->callback((Fl_Callback*)cb_ExtractWidgetPropertyGroupCloseButton);
      }
      { Fl_Return_Button* o = ExtractWidgetPropertyGroupDoneButton = new Fl_Return_Button(219, 623, 66, 20, "Done");
        o->callback((Fl_Callback*)cb_ExtractWidgetPropertyGroupDoneButton);
      }
      o->end();
    }
    o->end();
  }
}

void IaFeMesh::Show() {
  this->MainWindow->show();
HideAll();
this->VTKRenderer->SetBackground(0.5,0.5,0.5);
this->VTKRenderWindow->AddRenderer(this->VTKRenderer);
this->VTKFlWindow->SetInteractorStyle(InteractorStyleSelect);
this->AxisRenderer->SetBackground(0.2,0.2,0.2);
this->AxisRenderer->InteractiveOff();
this->VTKRenderWindow->SetNumberOfLayers(2);
this->VTKRenderer->SetLayer(0);
this->AxisRenderer->SetLayer(1);
this->AxisRenderer->SetViewport(0.0,0.0,0.25,0.25);
this->AxisRenderer->AddActor(this->PVAxesActor);
this->CallBackCommand->SetCallback(updateAxis);
this->CallBackCommand->SetClientData(this);
this->VTKRenderer->AddObserver(vtkCommand::AnyEvent,this->CallBackCommand);
this->VTKRenderWindow->AddRenderer(this->AxisRenderer);
InteractorStyleSelect->SetInteractorStyleSelectState(0);
this->VTKFlWindow->SetRenderWindow(this->VTKRenderWindow);
this->VTKFlWindow->Initialize();
this->VTKFlWindow->show();
}

void IaFeMesh::FitView() {
  double XYZ[6];
this->VTKRenderer->ComputeVisiblePropBounds(XYZ);
this->VTKRenderer->ResetCamera(XYZ);
this->VTKRenderWindow->Render();
}

void IaFeMesh::HideAll() {
  SurfaceDistanceMapGroup->hide();
CreateCurveGroup->hide();
PlanarTransInterpGroup->hide();
LaplacianSmoothingGroup->hide();
this->MainWindow->show();
this->DoneButton->hide();
EdgeSolidTransInterpGroup->hide();
ImageGroup->hide();
SurfaceGroup->hide();
CurveGroup->hide();
StructuredPlanarMeshGroup->hide();
StructuredSolidMeshGroup->hide();
UnstructuredMeshGroup->hide();
TransformGroup->hide();
GeometryPropertyGroup->hide();
ClipImageFromBoxGroup->hide();
EditBBMeshSeedGroup->hide();
CreateIrregularCylindricalMeshGroup->hide();
EditBBMergeNodesGroup->hide();
EditBBMirrorGroup->hide();
BBWidgetPropertyGroup->hide();
ExtractWidgetPropertyGroup->hide();
MeshQualityGroup->hide();
MergeSolidMeshGroup->hide();
//MorphBoundingBoxGroup->hide();
AbaqusFormatPropertiesGroup->hide();
ExtrudeSurfaceGroup->hide();
PickSurfacePropertyGroup->hide();
ChangeMeshSeedGroup->hide();
PosteriorElementMeshGroup->hide();
PatchSurfaceGroup->hide();
CreateMeshFromBoundingBoxGroup->hide();
RecalculateInteriorNodesGroup->hide();
CreateIntervertebralDiscMeshGroup->hide();
CreateIntervertebralDiscElementSetsGroup->hide();
}

vtkMimxSTLSource* IaFeMesh::GetSTLCheckedItem() {
  int i = 1;
bool status = false;

do
{
	if(this->STLCheckBrowser->checked(i))	
	{
		return this->vtkSTLSourceList.GetValue(i);
		break;
	status = true;}
	i++;
}while(!this->STLCheckBrowser->checked(i-1) && i <= this->STLCheckBrowser->nitems());

if(!status) return NULL;
}

vtkMimxCurve* IaFeMesh::GetCurveCheckedItem() {
  int i = 1;
bool status = false;

do
{
	if(this->CurveCheckBrowser->checked(i))	
	{
		return this->vtkCurveList.GetValue(i);
		break;
	status = true;}
	i++;
}while(!this->CurveCheckBrowser->checked(i-1) && i <= this->CurveCheckBrowser->nitems());

if(!status) return NULL;
}

void IaFeMesh::Reset() {
  for(int i = 1; i <= this->STLCheckBrowser->nitems(); i++)
{
	double color[3];	
	this->vtkSTLSourceList.GetValue(i)->GetPrevColor(color);	
	this->vtkSTLSourceList.GetValue(i)->GetActor()->GetProperty()
		->SetColor(color);
}

for(int i = 1; i <= this->CurveCheckBrowser->nitems(); i++)
{
	double color[3];	
	this->vtkCurveList.GetValue(i)->GetPrevColor(color);	
	this->vtkCurveList.GetValue(i)->GetActor()->GetProperty()
		->SetColor(color);
}
this->FitView();
}

vtkMimxUGrid* IaFeMesh::GetUGridCheckedItem() {
  int i = 1;
bool status = false;

do
{
	if(this->UGridCheckBrowser->checked(i))	
	{
		return this->vtkUGridList.GetValue(i);
		break;
	status = true;}
	i++;
}while(!this->UGridCheckBrowser->checked(i-1) && i <= 
	this->UGridCheckBrowser->nitems());

if(!status) return NULL;
}

vtkMimxClipImageFromBox* IaFeMesh::GetImageCheckedItem() {
  int i = 1;
bool status = false;

do
{
	if(this->ImageCheckBrowser->checked(i))	
	{
		return this->vtkImageList.GetValue(i);
		break;
	status = true;}
	i++;
}while(!this->ImageCheckBrowser->checked(i-1) && i <= 
	this->ImageCheckBrowser->nitems());

if(!status) return NULL;
}

vtkMimxPlanarStructuredGridSource* IaFeMesh::GetPlanarStructuredGridCheckedItem() {
  int i = 1;
bool status = false;

do
{
	if(this->StructuredPlanarMeshCheckBrowser->checked(i))	
	{
		return this->vtkPlanarStructuredGridList.GetValue(i);
		break;
	status = true;}
	i++;
}while(!this->StructuredPlanarMeshCheckBrowser->checked(i-1) && i <= 
	this->StructuredPlanarMeshCheckBrowser->nitems());

if(!status) return NULL;
}

int IaFeMesh::GetSTLCheckedNumber() {
  int i = 1;
bool status = false;

do
{
	if(this->STLCheckBrowser->checked(i))	
	{
		status = true;
		return i;		
	}
	i++;
}while(!this->CurveCheckBrowser->checked(i-1) && i <= this->CurveCheckBrowser->nitems());

if(!status) return 0;
}

vtkMimxSolidStructuredGridSource* IaFeMesh::GetSolidStructuredGridCheckedItem() {
  int i = 1;
bool status = false;

do
{
	if(this->StructuredSolidMeshCheckBrowser->checked(i))	
	{
		return this->vtkSolidStructuredGridSourceList.GetValue(i);
		break;
	status = true;}
	i++;
}while(!this->StructuredSolidMeshCheckBrowser->checked(i-1) && i <= 
	this->StructuredSolidMeshCheckBrowser->nitems());

if(!status) return NULL;
}

void IaFeMesh::InitializeAll() {
  UGrid = NULL;
BoundingBoxUGrid = NULL;
CompleteSurface = NULL;
CutSurface = NULL;
UGrid1 = NULL;
}

int IaFeMesh::GetSTLCheckedItemNumber() {
  int i = 1;
bool status = false;

do
{
	if(this->STLCheckBrowser->checked(i))	
	{
		return i;
		break;
	status = true;}
	i++;
}while(!this->STLCheckBrowser->checked(i-1) && i <= this->STLCheckBrowser->nitems());

if(!status) return 0;
}

void IaFeMesh::DeleteSTLCheckBrowserEntries() {
  // create the list of names associated with the
CLinkedList<char*> charlist;
CLinkedList<vtkMimxSTLSource*> localsurfacelist;

int i;
for(i=1; i<=this->STLCheckBrowser->nitems(); i++)
{
	if(!this->STLCheckBrowser->checked(i))
	{
		char name[256];
		strcpy(name, this->STLCheckBrowser->text(i));
		charlist.Add(name);
		localsurfacelist.Add(this->vtkSTLSourceList.GetValue(i));
	}
}

// delete and hide all the objects to be removed
for(i=1; i<= this->STLCheckBrowser->nitems(); i++)
{
		if(this->STLCheckBrowser->checked(i))
		{
	        this->VTKRenderer->RemoveActor(this->vtkSTLSourceList.GetValue(i)->GetActor());
	        this->vtkSTLSourceList.GetValue(i)->Delete();
	        }
}

int numitems = this->STLCheckBrowser->nitems();
do
{
	this->vtkSTLSourceList.Remove(this->vtkSTLSourceList.GetValue(numitems));
	numitems --;
}while(numitems !=0);

// clear the browser and reenter only the unmarked contents
this->STLCheckBrowser->clear();

for(i=1; i<= charlist.Size(); i++)
{
	this->vtkSTLSourceList.Add(localsurfacelist.GetValue(i));
	this->STLCheckBrowser->add(charlist.GetValue(i));
}

numitems = charlist.Size();
int count = 0;
if(numitems)
{
do
{
	localsurfacelist.Remove(localsurfacelist.GetValue(numitems));
	if(!count)
		charlist.Remove(charlist.GetValue(numitems));
	count ++;
	numitems --;
}while(numitems !=0);
}
		this->FitView();
		this->STLCheckBrowser->redraw();
}

void IaFeMesh::DeleteUGridCheckBrowserEntries() {
  // create the list of names associated with the
CLinkedList<char*> charlist;
CLinkedList<vtkMimxUGrid*> localugridlist;

int i;
for(i=1; i<=this->UGridCheckBrowser->nitems(); i++)
{
	if(!this->UGridCheckBrowser->checked(i))
	{
		char name[256];
		strcpy(name, this->UGridCheckBrowser->text(i));
		charlist.Add(name);
		localugridlist.Add(this->vtkUGridList.GetValue(i));
	}
}

// delete and hide all the objects to be removed
for(i=1; i<= this->UGridCheckBrowser->nitems(); i++)
{
		if(this->UGridCheckBrowser->checked(i))
		{
	        this->VTKRenderer->RemoveActor(this->vtkUGridList.GetValue(i)->GetActor());
		delete        this->vtkUGridList.GetValue(i);
	        }
}

int numitems = this->UGridCheckBrowser->nitems();
do
{
	this->vtkUGridList.Remove(this->vtkUGridList.GetValue(numitems));
	numitems --;
}while(numitems !=0);

// clear the browser and reenter only the unmarked contents
this->UGridCheckBrowser->clear();

for(i=1; i<= charlist.Size(); i++)
{
	this->vtkUGridList.Add(localugridlist.GetValue(i));
	this->UGridCheckBrowser->add(charlist.GetValue(i));
}

numitems = charlist.Size();
int count = 0;
if(numitems)
{
do
{
	localugridlist.Remove(localugridlist.GetValue(numitems));
	if(!count)
		charlist.Remove(charlist.GetValue(numitems));
	count++;
	numitems --;
}while(numitems !=0);
}
		this->FitView();
		this->UGridCheckBrowser->redraw();
}

void updateAxis(vtkObject* caller, unsigned long , void* arg, void* ) {
  double    cPos[3], cFoc[3], aFoc[3];
	int       *size;

	// set the axis camera according to the main renderer.
	IaFeMesh *iafemesh = (IaFeMesh *)arg;
	iafemesh->VTKRenderer->GetActiveCamera()->GetPosition(cPos);
	iafemesh->VTKRenderer->GetActiveCamera()->GetFocalPoint(cFoc);
	iafemesh->AxisRenderer->GetActiveCamera()->GetFocalPoint(aFoc);
	iafemesh->AxisRenderer->GetActiveCamera()->SetViewUp(iafemesh->VTKRenderer->GetActiveCamera()->GetViewUp());
	iafemesh->AxisRenderer->GetActiveCamera()->SetPosition(cPos[0] - cFoc[0] +
		aFoc[0],\
		cPos[1] - cFoc[1] + aFoc[1],\
		cPos[2] - cFoc[2] + aFoc[2]);
	iafemesh->AxisRenderer->ResetCamera();

	// keep the axis window size a constant 120 pixels squared (ugly).
//	size = iafemesh->VTKRenderWindow->GetSize();
	//iafemesh->AxisRenderer->SetViewport(\
		//((float)size[0]-120.)/(float)size[0],\
		//0.,\
		//1.,\
		//(120.)/(float)size[1]);
}
